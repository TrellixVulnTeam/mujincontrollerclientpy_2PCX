# -*- coding: utf-8 -*-
#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED
# GENERATED BY: mujin_controllerclientpy_generategraphclient.py
# GENERATED AGAINST: mujinwebstack/2.0.135.744420620f78c229f3c18b9ceedef58e18e44fa6-dirty
#

from .controllergraphclientutils import ControllerGraphClientBase

class ControllerGraphQueries:

    def GetAttachedSensor(self, attachedSensorId, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a particular attached sensor on a robot.

        Args:
            attachedSensorId (String!): ID of the existing attached sensor.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: Attached sensor on a robot.
        """
        parameterNameTypeValues = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def GetBody(self, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a particular body in an environment.

        Args:
            bodyId (String!): ID of the existing body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: Body or a robot in an environment.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def GetBodyParameters(self, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            BodyParameters: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def GetConnectedBody(self, bodyId, connectedBodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a particular connected body on a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBodyId (String!): ID of the existing connected body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def GetEnvironment(self, environmentId, units=None, fields=None, timeout=None):
        """Get a specific environment.

        Args:
            environmentId (String!): ID of an existing environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: Environment represents an OpenRAVE environment.
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def GetGeometry(self, bodyId, environmentId, geometryId, linkId, units=None, fields=None, timeout=None):
        """Get a particular geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometryId (String!): ID of the existing geometry.
            linkId (String!): ID of the link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry belonging to a link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def GetGrabbed(self, bodyId, environmentId, grabbedId, units=None, fields=None, timeout=None):
        """Get a particular grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbedId (String!): ID of the existing grabbed object.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: Grabbed object describes a grabbing relationship.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def GetGraspSet(self, bodyId, environmentId, graspSetId, units=None, fields=None, timeout=None):
        """Get a particular grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSetId (String!): ID of the existing grasp set.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Grasp set describes a set of ikparams.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def GetGripperInfo(self, bodyId, environmentId, gripperInfoId, units=None, fields=None, timeout=None):
        """Get a particular gripper info on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfoId (String!): ID of the existing gripper info.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def GetIKParameterization(self, bodyId, environmentId, ikParamId, units=None, fields=None, timeout=None):
        """Get a particular ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParamId (String!): ID of the existing ikparam.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def GetJoint(self, bodyId, environmentId, jointId, units=None, fields=None, timeout=None):
        """Get a particular joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            jointId (String!): ID of the existing joint.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body describing the linkage between a parent link and a child link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('jointId', 'String!', jointId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def GetLink(self, bodyId, environmentId, linkId, units=None, fields=None, timeout=None):
        """Get a particular link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            linkId (String!): ID of the existing link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def GetPositionConfiguration(self, bodyId, environmentId, positionConfigurationId, units=None, fields=None, timeout=None):
        """Get a particular position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfigurationId (String!): ID of the existing position configuration.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def GetRevision(self, environmentId, revisionId, units=None, fields=None, timeout=None):
        """Get a particular revision of an environment.

        Args:
            environmentId (String!): ID of the environment.
            revisionId (Int!): ID of the revision.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Revision: Revision of an environment, contains backward and forward differences.
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('revisionId', 'Int!', revisionId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRevision', parameterNameTypeValues=parameterNameTypeValues, returnType='Revision', fields=fields, timeout=timeout)

    def GetRobotMotionParameters(self, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def GetTool(self, bodyId, environmentId, toolId, units=None, fields=None, timeout=None):
        """Get a particular tool on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            toolId (String!): ID of the existing tool.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def IsAttachedSensorMoveable(self, attachedSensorName, bodyName, environmentId, fields=None, timeout=None):
        """Check and see if attached sensor is moveable on a robot

        Args:
            attachedSensorName (String!): Name of the attached sensor, could be in the format of "connectedBodyName_attachedSensorName"
            bodyName (String!): Name of the body to check
            environmentId (String!): ID of the environment to check
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Boolean!: 
        """
        parameterNameTypeValues = [
            ('attachedSensorName', 'String!', attachedSensorName),
            ('bodyName', 'String!', bodyName),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='IsAttachedSensorMoveable', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ListAttachedSensors(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List attached sensors defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListAttachedSensorsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAttachedSensors', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAttachedSensorsReturnValue', fields=fields, timeout=timeout)

    def ListBodies(self, environmentId, options=None, units=None, fields=None, timeout=None):
        """List bodies in an environment.

        Args:
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListBodiesReturnValue: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListBodiesReturnValue', fields=fields, timeout=timeout)

    def ListConnectedBodies(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List connected bodies defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListConnectedBodiesReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConnectedBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConnectedBodiesReturnValue', fields=fields, timeout=timeout)

    def ListEnvironments(self, options=None, units=None, fields=None, timeout=None):
        """List all environments.

        Args:
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListEnvironmentsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEnvironmentsReturnValue', fields=fields, timeout=timeout)

    def ListGeometries(self, bodyId, environmentId, linkId, options=None, units=None, fields=None, timeout=None):
        """List geometries in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            linkId (String!): ID of the link.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGeometriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGeometries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGeometriesReturnValue', fields=fields, timeout=timeout)

    def ListGrabbeds(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List grabbed objects in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGrabbedsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGrabbeds', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGrabbedsReturnValue', fields=fields, timeout=timeout)

    def ListGraspSets(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List grasp sets in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGraspSetsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGraspSets', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGraspSetsReturnValue', fields=fields, timeout=timeout)

    def ListGripperInfos(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List gripper infos defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGripperInfosReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGripperInfos', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGripperInfosReturnValue', fields=fields, timeout=timeout)

    def ListIKParameterizations(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List ikparams in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListIKParameterizationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListIKParameterizations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListIKParameterizationsReturnValue', fields=fields, timeout=timeout)

    def ListJoints(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List joints in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListJointsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListJoints', parameterNameTypeValues=parameterNameTypeValues, returnType='ListJointsReturnValue', fields=fields, timeout=timeout)

    def ListLinks(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List links in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListLinksReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLinks', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLinksReturnValue', fields=fields, timeout=timeout)

    def ListPositionConfigurations(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List position configurations in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListPositionConfigurationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListPositionConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListPositionConfigurationsReturnValue', fields=fields, timeout=timeout)

    def ListRevisions(self, environmentId, options=None, units=None, fields=None, timeout=None):
        """List revisions of an environment.

        Args:
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListRevisionsReturnValue: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListRevisions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListRevisionsReturnValue', fields=fields, timeout=timeout)

    def ListTools(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List tools defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListToolsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListTools', parameterNameTypeValues=parameterNameTypeValues, returnType='ListToolsReturnValue', fields=fields, timeout=timeout)


class ControllerGraphMutations:

    def CopyAttachedSensor(self, attachedSensor, attachedSensorId, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing attached sensor on a robot to a new one.

        Args:
            attachedSensor (AttachedSensorInput!): Properties to change on the copied the attached sensor.
            attachedSensorId (String!): ID of the existing attached sensor.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: Attached sensor on a robot.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CopyBody(self, body, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing body in an environment to a new one.

        Args:
            body (BodyInput!): Properties to be applied on the copied body.
            bodyId (String!): ID of the existing body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: Body or a robot in an environment.
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CopyConnectedBody(self, bodyId, connectedBody, connectedBodyId, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing connected body on a robot to a new one.

        Args:
            bodyId (String!): ID of the body.
            connectedBody (ConnectedBodyInput!): Properties to change on the copied the connected body.
            connectedBodyId (String!): ID of the existing connected body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CopyEnvironment(self, environment, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing environment to a new one.

        Args:
            environment (EnvironmentInput!): Properties to be applied on the copied environment.
            environmentId (String!): ID of the existing environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: Environment represents an OpenRAVE environment.
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CopyGeometry(self, bodyId, environmentId, geometry, geometryId, linkId, units=None, fields=None, timeout=None):
        """Copy an existing geometry in a link to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometry (GeometryInput!): Properties to be applied on the copied geometry.
            geometryId (String!): ID of the existing geometry.
            linkId (String!): ID of the link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry belonging to a link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CopyGrabbed(self, bodyId, environmentId, grabbed, grabbedId, units=None, fields=None, timeout=None):
        """Copy an existing grabbed object in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbed (GrabbedInput!): Properties to be applied on the copied grabbed object.
            grabbedId (String!): ID of the existing grabbed object.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: Grabbed object describes a grabbing relationship.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CopyGraspSet(self, bodyId, environmentId, graspSet, graspSetId, units=None, fields=None, timeout=None):
        """Copy an existing grasp set in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSet (GraspSetInput!): Properties to be applied on the copied grasp set.
            graspSetId (String!): ID of the existing grasp set.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Grasp set describes a set of ikparams.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CopyGripperInfo(self, bodyId, environmentId, gripperInfo, gripperInfoId, units=None, fields=None, timeout=None):
        """Copy an existing gripper info on a robot to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfo (GripperInfoInput!): Properties to change on the copied the gripper info.
            gripperInfoId (String!): ID of the existing gripper info.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CopyIKParameterization(self, bodyId, environmentId, ikParam, ikParamId, units=None, fields=None, timeout=None):
        """Copy an existing ikparam in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParam (IKParameterizationInput!): Properties to be applied on the copied ikparam.
            ikParamId (String!): ID of the existing ikparam.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CopyJoint(self, bodyId, environmentId, joint, jointId, units=None, fields=None, timeout=None):
        """Copy an existing joint in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            joint (JointInput!): Properties to be applied on the copied joint.
            jointId (String!): ID of the existing joint.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body describing the linkage between a parent link and a child link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('jointId', 'String!', jointId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def CopyLink(self, bodyId, environmentId, link, linkId, units=None, fields=None, timeout=None):
        """Copy an existing link in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            link (LinkInput!): Properties to be applied on the copied link.
            linkId (String!): ID of the existing link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CopyPositionConfiguration(self, bodyId, environmentId, positionConfiguration, positionConfigurationId, units=None, fields=None, timeout=None):
        """Copy an existing position configuration in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfiguration (PositionConfigurationInput!): Properties to be applied on the copied position configuration.
            positionConfigurationId (String!): ID of the existing position configuration.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CopyTool(self, bodyId, environmentId, tool, toolId, units=None, fields=None, timeout=None):
        """Copy an existing tool on a robot to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            tool (ToolInput!): Properties to change on the copied the tool.
            toolId (String!): ID of the existing tool.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def CreateAttachedSensor(self, attachedSensor, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Create a new attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput!): Properties for the new attached sensor.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: Attached sensor on a robot.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CreateBody(self, body, environmentId, units=None, fields=None, timeout=None):
        """Create a new body in an environment.

        Args:
            body (BodyInput!): Properties to be applied on the newly created body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: Body or a robot in an environment.
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CreateBodyParameters(self, bodyId, bodyParameters, environmentId, units=None, fields=None, timeout=None):
        """Create a new body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            bodyParameters (BodyParametersInput!): Properties to be applied on the newly created body parameters.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            BodyParameters: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def CreateConnectedBody(self, bodyId, connectedBody, environmentId, units=None, fields=None, timeout=None):
        """Create a new connected body on a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBody (ConnectedBodyInput!): Properties for the new connected body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CreateEnvironment(self, environment, units=None, fields=None, timeout=None):
        """Create a new environment.

        Args:
            environment (EnvironmentInput!): Properties to be applied on the newly created environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: Environment represents an OpenRAVE environment.
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CreateGeometry(self, bodyId, environmentId, geometry, linkId, units=None, fields=None, timeout=None):
        """Create a new geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometry (GeometryInput!): Properties to be applied on the newly created geometry.
            linkId (String!): ID of the existing geometry.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry belonging to a link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CreateGrabbed(self, bodyId, environmentId, grabbed, units=None, fields=None, timeout=None):
        """Create a new grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbed (GrabbedInput!): Properties to be applied on the newly created grabbed object.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: Grabbed object describes a grabbing relationship.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CreateGraspSet(self, bodyId, environmentId, graspSet, units=None, fields=None, timeout=None):
        """Create a new grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSet (GraspSetInput!): Properties to be applied on the newly created grasp set.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Grasp set describes a set of ikparams.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CreateGripperInfo(self, bodyId, environmentId, gripperInfo, units=None, fields=None, timeout=None):
        """Create a new gripper info on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfo (GripperInfoInput!): Properties for the new gripper info.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CreateIKParameterization(self, bodyId, environmentId, ikParam, units=None, fields=None, timeout=None):
        """Create a new ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParam (IKParameterizationInput!): Properties to be applied on the newly created ikparam.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CreateJoint(self, bodyId, environmentId, joint, units=None, fields=None, timeout=None):
        """Create a new joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            joint (JointInput!): Properties to be applied on the newly created joint.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body describing the linkage between a parent link and a child link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def CreateLink(self, bodyId, environmentId, link, units=None, fields=None, timeout=None):
        """Create a new link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            link (LinkInput!): Properties to be applied on the newly created link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CreatePositionConfiguration(self, bodyId, environmentId, positionConfiguration, units=None, fields=None, timeout=None):
        """Create a new position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfiguration (PositionConfigurationInput!): Properties to be applied on the newly created position configuration.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreatePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CreateRobotMotionParameters(self, bodyId, environmentId, robotMotionParameters, units=None, fields=None, timeout=None):
        """Create a new robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput!): Properties to be applied on the newly created robot motion parameters.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def CreateTool(self, bodyId, environmentId, tool, units=None, fields=None, timeout=None):
        """Create a new tool on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            tool (ToolInput!): Properties for the new tool.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def DeleteAttachedSensor(self, attachedSensorId, bodyId, environmentId, fields=None, timeout=None):
        """Delete a attached sensor from a robot.

        Args:
            attachedSensorId (String!): ID of the attached sensor to delete.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBody(self, bodyId, environmentId, fields=None, timeout=None):
        """Delete a body in an environment.

        Args:
            bodyId (String!): ID of the body to delete.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBodyParameters(self, bodyId, environmentId, fields=None, timeout=None):
        """Delete a body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteConnectedBody(self, bodyId, connectedBodyId, environmentId, fields=None, timeout=None):
        """Delete a connected body from a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBodyId (String!): ID of the connected body to delete.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteEnvironment(self, environmentId, fields=None, timeout=None):
        """Delete an environment.

        Args:
            environmentId (String!): ID of the environment to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGeometry(self, bodyId, environmentId, geometryId, linkId, fields=None, timeout=None):
        """Delete a geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometryId (String!): ID of the geometry to delete.
            linkId (String!): ID of the link.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGrabbed(self, bodyId, environmentId, grabbedId, fields=None, timeout=None):
        """Delete a grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbedId (String!): ID of the grabbed object to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGraspSet(self, bodyId, environmentId, graspSetId, fields=None, timeout=None):
        """Delete a grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSetId (String!): ID of the grasp set to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGripperInfo(self, bodyId, environmentId, gripperInfoId, fields=None, timeout=None):
        """Delete a gripper info from a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfoId (String!): ID of the gripper info to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteIKParameterization(self, bodyId, environmentId, ikParamId, fields=None, timeout=None):
        """Delete a ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParamId (String!): ID of the ikparam to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteJoint(self, bodyId, environmentId, jointId, fields=None, timeout=None):
        """Delete a joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            jointId (String!): ID of the joint to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('jointId', 'String!', jointId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteLink(self, bodyId, environmentId, linkId, fields=None, timeout=None):
        """Delete a link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            linkId (String!): ID of the link to be deleted.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeletePositionConfiguration(self, bodyId, environmentId, positionConfigurationId, fields=None, timeout=None):
        """Delete a position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfigurationId (String!): ID of the position configuration to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeletePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteRobotMotionParameters(self, bodyId, environmentId, fields=None, timeout=None):
        """Delete a robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteTool(self, bodyId, environmentId, toolId, fields=None, timeout=None):
        """Delete a tool from a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            toolId (String!): ID of the tool to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ExtractBody(self, body, bodyId, environment, environmentId, units=None, fields=None, timeout=None):
        """Extract a body from an environment as a new single body environment.

        Args:
            body (BodyInput!): Properties to be applied on the newly created body.
            bodyId (String!): ID of the body to extract.
            environment (EnvironmentInput!): Properties to be applied on the newly created environment.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: Environment represents an OpenRAVE environment.
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ExtractBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ModifyAttachedSensor(self, attachedSensor, attachedSensorId, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput!): Proprties to modify on the attached sensor.
            attachedSensorId (String!): ID of the attached sensor to modify.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: Attached sensor on a robot.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def ModifyBody(self, body, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing body in an environment.

        Args:
            body (BodyInput!): Properties to be modified on the body.
            bodyId (String!): ID of the body to modify.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: Body or a robot in an environment.
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def ModifyBodyParameters(self, bodyId, bodyParameters, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            bodyParameters (BodyParametersInput!): Properties to be modified on the body parameters.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            BodyParameters: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def ModifyConnectedBody(self, bodyId, connectedBody, connectedBodyId, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing connected body on a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBody (ConnectedBodyInput!): Proprties to modify on the connected body.
            connectedBodyId (String!): ID of the connected body to modify.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def ModifyEnvironment(self, environment, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing environment.

        Args:
            environment (EnvironmentInput!): Properties to be modified on the existing environment.
            environmentId (String!): ID of the environment to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: Environment represents an OpenRAVE environment.
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ModifyGeometry(self, bodyId, environmentId, geometry, geometryId, linkId, units=None, fields=None, timeout=None):
        """Modify an existing geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometry (GeometryInput!): Properties to be modified on the geometry.
            geometryId (String!): ID of the geometry to modify.
            linkId (String!): ID of the link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry belonging to a link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def ModifyGrabbed(self, bodyId, environmentId, grabbed, grabbedId, units=None, fields=None, timeout=None):
        """Modify an existing grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbed (GrabbedInput!): Properties to be modified on the grabbed object.
            grabbedId (String!): ID of the grabbed object to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: Grabbed object describes a grabbing relationship.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def ModifyGraspSet(self, bodyId, environmentId, graspSet, graspSetId, units=None, fields=None, timeout=None):
        """Modify an existing grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSet (GraspSetInput!): Properties to be modified on the grasp set.
            graspSetId (String!): ID of the grasp set to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Grasp set describes a set of ikparams.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def ModifyGripperInfo(self, bodyId, environmentId, gripperInfo, gripperInfoId, units=None, fields=None, timeout=None):
        """Modify an existing gripper info on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfo (GripperInfoInput!): Proprties to modify on the gripper info.
            gripperInfoId (String!): ID of the gripper info to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def ModifyIKParameterization(self, bodyId, environmentId, ikParam, ikParamId, units=None, fields=None, timeout=None):
        """Modify an existing ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParam (IKParameterizationInput!): Properties to be modified on the ikparam.
            ikParamId (String!): ID of the ikparam to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def ModifyJoint(self, bodyId, environmentId, joint, jointId, units=None, fields=None, timeout=None):
        """Modify an existing joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            joint (JointInput!): Properties to be modified on the joint.
            jointId (String!): ID of the joint to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body describing the linkage between a parent link and a child link.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('jointId', 'String!', jointId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def ModifyLink(self, bodyId, environmentId, link, linkId, units=None, fields=None, timeout=None):
        """Modify an existing link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            link (LinkInput!): Properties to be modified on the link.
            linkId (String!): ID of the link to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def ModifyPositionConfiguration(self, bodyId, environmentId, positionConfiguration, positionConfigurationId, units=None, fields=None, timeout=None):
        """Modify an existing position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfiguration (PositionConfigurationInput!): Properties to be modified on the position configuration.
            positionConfigurationId (String!): ID of the position configuration to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def ModifyRobotMotionParameters(self, bodyId, environmentId, robotMotionParameters, units=None, fields=None, timeout=None):
        """Modify an existing robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput!): Properties to be modified on the robot motion parameters.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def ModifyTool(self, bodyId, environmentId, tool, toolId, units=None, fields=None, timeout=None):
        """Modify an existing tool on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            tool (ToolInput!): Proprties to modify on the tool.
            toolId (String!): ID of the tool to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)


class ControllerGraphClient(ControllerGraphClientBase, ControllerGraphQueries, ControllerGraphMutations):

    typeDatabase = {

        # Optional unit selection.
        'UnitSelectionInput': {
            # Unit for angles, one of: deg, rad.
            'angleUnit': 'String', # String
            # Unit for length values, one of: m, meter, cm, mm, um, nm, inch.
            'lengthUnit': 'String', # String
            # Unit for mass values, one of: g, kg.
            'massUnit': 'String', # String
        },

        'CameraIntrinsics': {
            'cx': 'Float', # Float!
            'cy': 'Float', # Float!
            'distortionCoeffs': 'Float', # [Float!]!
            'distortionModel': 'String', # String!
            'focalLength': 'Float', # Float!
            'fx': 'Float', # Float!
            'fy': 'Float', # Float!
        },

        'SensorGeometry': {
            'gain': 'Float', # Float
            'hardwareId': 'String', # String
            'height': 'Int', # Int
            'intrinsics': 'CameraIntrinsics', # CameraIntrinsics
            'measurementTime': 'Float', # Float
            # deprecated, keep for backcompat conversion
            'sensorReference': 'String', # String
            'targetRegion': 'String', # String
            'width': 'Int', # Int
        },

        # Attached sensor on a robot.
        'AttachedSensor': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            'linkName': 'String', # String
            'name': 'String', # String
            'referenceAttachedSensorName': 'String', # String
            'sensorGeometry': 'SensorGeometry', # SensorGeometry
            'sensorMaker': 'String', # String
            'sensorModel': 'String', # String
            'transform': 'Float', # [Float!]
            'type': 'String', # String
        },

        # Gripper info describing the gripper properties, used for planning gripper operations.
        'GripperInfo': {
            'deleted': 'Boolean', # Boolean!
            'extendable': 'Any', # Any!
            'gripperJointNames': 'String', # [String!]
            'grippertype': 'String', # String
            'id': 'String', # String!
            'name': 'String', # String
        },

        'ElectricMotorActuator': {
            'assignedPowerRating': 'Float', # Float
            'coloumbFriction': 'Float', # Float
            'gearRatio': 'Float', # Float
            'maxInstantaneousTorque': 'Float', # Float
            'maxSpeed': 'Float', # Float
            'maxSpeedTorquePoints': 'Float', # [[Float!]!]
            'modelType': 'String', # String
            'noLoadSpeed': 'Float', # Float
            'nominalSpeedTorquePoints': 'Float', # [[Float!]!]
            'nominalTorque': 'Float', # Float
            'nominalVoltage': 'Float', # Float
            'rotorInertia': 'Float', # Float
            'speedConstant': 'Float', # Float
            'stallTorque': 'Float', # Float
            'startingCurrent': 'Float', # Float
            'terminalResistance': 'Float', # Float
            'torqueConstant': 'Float', # Float
            'viscousFriction': 'Float', # Float
        },

        'FloatsParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            'values': 'Float', # [Float!]
        },

        'IntsParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            'values': 'Int', # [Int!]
        },

        'Mimic': {
            'equations': 'String', # [String!]!
        },

        'StringParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            'value': 'String', # String
        },

        # Joint in a body describing the linkage between a parent link and a child link.
        'Joint': {
            'anchors': 'Float', # [Float!]
            # axis and anchor are relative to parent link in openrave
            'axes': 'Float', # [[Float!]!]
            'childLinkName': 'String', # String
            'currentValues': 'Float', # [Float!]
            'deleted': 'Boolean', # Boolean!
            'electricMotorActuator': 'ElectricMotorActuator', # ElectricMotorActuator
            'floatParameters': 'FloatsParameter', # [FloatsParameter]
            'hardMaxAccel': 'Float', # [Float!]
            'hardMaxJerk': 'Float', # [Float!]
            'hardMaxVel': 'Float', # [Float!]
            'id': 'String', # String!
            'intParameters': 'IntsParameter', # [IntsParameter]
            'isActive': 'Boolean', # Boolean
            'isCircular': 'Int', # [Int!]
            'lowerLimit': 'Float', # [Float!]
            'maxAccel': 'Float', # [Float!]
            'maxInertia': 'Float', # [Float!]
            'maxJerk': 'Float', # [Float!]
            'maxTorque': 'Float', # [Float!]
            'maxVel': 'Float', # [Float!]
            'mimics': 'Mimic', # [Mimic!]
            'name': 'String', # String
            'offsets': 'Float', # [Float!]
            'parentLinkName': 'String', # String
            'resolutions': 'Float', # [Float!]
            'stringParameters': 'StringParameter', # [StringParameter]
            # revolute or prismatic
            'type': 'String', # String
            'upperLimit': 'Float', # [Float!]
            'weights': 'Float', # [Float!]
        },

        'CalibrationBoardParameters': {
            'bigDotDiameterDistanceRatio': 'Float', # Float
            'dotColor': 'Float', # [Float!]
            'dotDiameterDistanceRatio': 'Float', # Float
            'dotsDistanceX': 'Float', # Float
            'dotsDistanceY': 'Float', # Float
            'numDotsX': 'Int', # Int
            'numDotsY': 'Int', # Int
            'patternName': 'String', # String
        },

        # triangle mesh
        'Mesh': {
            'indices': 'Int', # [Int!]!
            'vertices': 'Float', # [Float!]!
        },

        'SideWall': {
            'halfExtents': 'Float', # [Float!]!
            'transform': 'Float', # [Float!]!
            'type': 'String', # String!
        },

        # Geometry belonging to a link.
        'Geometry': {
            'ambientColor': 'Float', # [Float!]
            # for cage
            'baseExtents': 'Float', # [Float!]
            'bottom': 'Float', # [Float!]
            'bottomCross': 'Float', # [Float!]
            # for calibration board
            'calibrationBoardParameters': 'CalibrationBoardParameters', # CalibrationBoardParameters
            'deleted': 'Boolean', # Boolean!
            'diffuseColor': 'Float', # [Float!]
            # for box
            'halfExtents': 'Float', # [Float!]
            # for cylinder only
            'height': 'Float', # Float
            'id': 'String', # String!
            'innerExtents': 'Float', # [Float!]
            'innerSizeX': 'Float', # Float
            'innerSizeY': 'Float', # Float
            'innerSizeZ': 'Float', # Float
            # for trimesh
            'mesh': 'Mesh', # Mesh
            'modifiable': 'Boolean', # Boolean
            'name': 'String', # String
            # for container
            'outerExtents': 'Float', # [Float!]
            # for sphere and cylinder
            'radius': 'Float', # Float
            'sideWalls': 'SideWall', # [SideWall!]
            # transform of geometry in link space
            'transform': 'Float', # [Float!]
            'transparency': 'Float', # Float
            # type of geometry, can be one of: box, container, cage, sphere, cylinder, trimesh
            'type': 'String', # String
            'visible': 'Boolean', # Boolean
        },

        # Link of a body, containing geometries.
        'Link': {
            'deleted': 'Boolean', # Boolean!
            'floatParameters': 'FloatsParameter', # [FloatsParameter]
            'forcedAdjacentLinks': 'String', # [String!]
            # List of geometries in this link.
            'geometries': 'Geometry', # [Geometry]
            # ID of the link.
            'id': 'String', # String!
            'inertiaMoments': 'Float', # [Float!]
            'intParameters': 'IntsParameter', # [IntsParameter]
            'isEnabled': 'Boolean', # Boolean
            'isStatic': 'Boolean', # Boolean
            # Mass of the link, in kg.
            'mass': 'Float', # Float
            # The frame for inertia and center of mass of the link in the link's coordinate system.
            'massTransform': 'Float', # [Float!]
            # Name of the link.
            'name': 'String', # String
            'stringParameters': 'StringParameter', # [StringParameter]
            # Link transform is relative to body, same convention as in OpenRAVE.
            'transform': 'Float', # [Float!]
        },

        # Tool describes a manipulator coordinate system of a robot.
        'Tool': {
            'baseLinkName': 'String', # String
            'chuckingDirections': 'Float', # [Float!]
            'deleted': 'Boolean', # Boolean!
            'direction': 'Float', # [Float!]
            'effectorLinkName': 'String', # String
            'gripperJointNames': 'String', # [String!]
            'grippername': 'String', # String
            'id': 'String', # String!
            'ikChainEndLinkName': 'String', # String
            'ikSolverType': 'String', # String
            'name': 'String', # String
            'restrictGraspSetNames': 'String', # [String!]
            'toolChangerConnectedBodyToolName': 'String', # String
            'toolChangerLinkName': 'String', # String
            'transform': 'Float', # [Float!]
        },

        'ConnectedBody': {
            # Attached sensor on a robot.
            'attachedSensors': 'AttachedSensor', # [AttachedSensor]
            'deleted': 'Boolean', # Boolean!
            # Gripper info describing the gripper properties, used for planning gripper operations.
            'gripperInfos': 'GripperInfo', # [GripperInfo]
            'id': 'String', # String!
            'isActive': 'Int', # Int
            # Joint in a body describing the linkage between a parent link and a child link.
            'joints': 'Joint', # [Joint]
            'linkName': 'String', # String
            # Link of a body, containing geometries.
            'links': 'Link', # [Link]
            'name': 'String', # String
            # Tool describes a manipulator coordinate system of a robot.
            'tools': 'Tool', # [Tool]
            'transform': 'Float', # [Float!]
            'uri': 'String', # String
        },

        'DOFValue': {
            'jointAxis': 'Int', # Int!
            'jointName': 'String', # String!
            'value': 'Float', # Float!
        },

        # Grabbed object describes a grabbing relationship.
        'Grabbed': {
            'deleted': 'Boolean', # Boolean!
            'grabbedName': 'String', # String
            'id': 'String', # String!
            'ignoreRobotLinkNames': 'String', # [String!]
            'robotLinkName': 'String', # String
            'transform': 'Float', # [Float!]
        },

        'GraspModelInfo': {
            'minNumSupportedFaces': 'Int', # Int
        },

        # Grasp set describes a set of ikparams.
        'GraspSet': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            # name of the ikparams
            'ikParams': 'String', # [String!]
            'name': 'String', # String
        },

        'SuctionCupsPerformance': {
            'score': 'String', # String!
            'suctionCupPartTypes': 'String', # [String!]!
        },

        'GripperSuctionCupsPerformance': {
            'gripperName': 'String', # String!
            'suctionCupsPerformances': 'SuctionCupsPerformance', # [SuctionCupsPerformance!]!
        },

        # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        'IKParameterization': {
            'angle': 'Float', # Float
            'customData': 'FloatsParameter', # [FloatsParameter]
            'deleted': 'Boolean', # Boolean!
            'direction': 'Float', # [Float!]
            'id': 'String', # String!
            'localTranslate': 'Float', # [Float!]
            'name': 'String', # String
            'quaternion': 'Float', # [Float!]
            'transform': 'Float', # [Float!]
            'translate': 'Float', # [Float!]
            # One of: Transform6D, Rotation3D, Translation3D, Direction3D, Ray4D, Lookat3D, TranslationDirection5D, TranslationXY2D, TranslationXYOrientation3D, TranslationLocalGlobal6D, TranslationXAxisAngle4D, TranslationYAxisAngle4D, TranslationZAxisAngle4D, TranslationXAxisAngleZNorm4D, TranslationYAxisAngleXNorm4D, TranslationZAxisAngleYNorm4D.
            'type': 'String', # String
        },

        'JointConfigurationState': {
            'connectedBodyName': 'String', # String!
            # If a joint configuration is part of a connected body (ie ConnectedBodyName is not empty), JointName does not include the ConnectedBodyName prefix, instead it is the pure joint name
            'jointName': 'String', # String!
            'jointValue': 'Float', # Float!
        },

        'PositionConfiguration': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            'jointConfigurationStates': 'JointConfigurationState', # [JointConfigurationState!]
            'name': 'String', # String
        },

        'Region': {
            'extents': 'Float', # [Float!]!
            'name': 'String', # String!
            'transform': 'Float', # [Float!]!
        },

        'BodyParameters': {
            'allowedPlacementOrientations': 'Int', # Int
            'barcodeScanningGain': 'Float', # Float
            'barcodes': 'String', # [String!]
            'bottomBoxDistSensorThresh': 'Float', # Float
            'disabledReferenceObjectPKs': 'String', # [String!]
            'distSensorMismatchReplanThresh': 'Float', # Float
            'graspModelInfo': 'GraspModelInfo', # GraspModelInfo
            # Grasp set describes a set of ikparams.
            'graspSets': 'GraspSet', # [GraspSet]
            'gripperSuctionCupsPerformances': 'GripperSuctionCupsPerformance', # [GripperSuctionCupsPerformance!]
            # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
            'ikParams': 'IKParameterization', # [IKParameterization]
            'knownBarCodeFaces': 'Int', # Int
            'materialType': 'String', # String
            'minSuctionForce': 'Float', # Float
            'minViableRegionSize2D': 'Float', # [Float!]
            'modelName': 'String', # String
            # parameters related to robot library objects
            'objectCategory': 'String', # String
            'objectDescription': 'Any', # Any
            'objectPackingId': 'String', # String
            'objectType': 'String', # String
            'packingOrderPriority': 'Int', # Int
            'positionConfigurations': 'PositionConfiguration', # [PositionConfiguration]
            'referenceObjectPKs': 'String', # [String!]
            'regions': 'Region', # [Region!]
            'totalNumBarCodes': 'Int', # Int
            'transferSpeedMult': 'Float', # Float
            'vendorName': 'String', # String
        },

        'SpeedLimitForToolName': {
            'maxToolSpeed': 'Float', # Float!
            'toolname': 'String', # String!
        },

        'SafetySpeedConstraintsInfo': {
            'speedLimitForToolNames': 'SpeedLimitForToolName', # [SpeedLimitForToolName!]!
            # if omitted, is SafetySpeedConstraintsInfo in effect by default? if so, need the tri-state
            'use': 'Boolean', # Boolean
        },

        'StringsParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            'values': 'String', # [String!]
        },

        'RobotMotionParameters': {
            'controllerDOFMults': 'Float', # [Float!]
            'controllerDOFOrder': 'Int', # [Int!]
            'controllerTimestep': 'Float', # Float
            'dynamicsConstraintsType': 'String', # String
            'floatParameters': 'FloatsParameter', # [FloatsParameter]
            'ikTypeName': 'String', # String
            'intParameters': 'IntsParameter', # [IntsParameter]
            'maxToolAccelRotation': 'Float', # Float
            'maxToolAccelTranslation': 'Float', # Float
            'maxToolSpeedRotation': 'Float', # Float
            'maxToolSpeedTranslation': 'Float', # Float
            'robotController': 'String', # String
            'robotLanguage': 'String', # String
            'robotMaker': 'String', # String
            'robotSimulationFile': 'String', # String
            'robotType': 'String', # String
            'safetySpeedConstraintsInfo': 'SafetySpeedConstraintsInfo', # SafetySpeedConstraintsInfo
            'stringParameters': 'StringsParameter', # [StringsParameter]
        },

        'ReadableInterfaces': {
            'bodyparameters': 'BodyParameters', # BodyParameters
            'extendable': 'Any', # Any!
            'robotmotionparameters': 'RobotMotionParameters', # RobotMotionParameters
        },

        # Body or a robot in an environment.
        'Body': {
            # Attached sensor on a robot.
            'attachedSensors': 'AttachedSensor', # [AttachedSensor]
            'connectedBodies': 'ConnectedBody', # [ConnectedBody]
            'created': 'DateTime', # DateTime
            'deleted': 'Boolean', # Boolean!
            'dofValues': 'DOFValue', # [DOFValue!]
            # Grabbed object describes a grabbing relationship.
            'grabbed': 'Grabbed', # [Grabbed]
            # Gripper info describing the gripper properties, used for planning gripper operations.
            'gripperInfos': 'GripperInfo', # [GripperInfo]
            'id': 'String', # String!
            # interfaceType, e.g. GenericRobot
            'interfaceType': 'String', # String
            # whether the body is a kinbody or a robot
            'isRobot': 'Boolean', # Boolean
            # Joint in a body describing the linkage between a parent link and a child link.
            'joints': 'Joint', # [Joint]
            # Link of a body, containing geometries.
            'links': 'Link', # [Link]
            'modified': 'DateTime', # DateTime
            'name': 'String', # String
            'readableInterfaces': 'ReadableInterfaces', # ReadableInterfaces
            'referenceUri': 'String', # String
            # just a hint, not supposed to be used by any logic
            'referenceUriHint': 'String', # String
            # Tool describes a manipulator coordinate system of a robot.
            'tools': 'Tool', # [Tool]
            'transform': 'Float', # [Float!]
        },

        'Attributes': {
            'aabbHalfExtents': 'Float', # [Float!]
            'barcodeScanningGain': 'Float', # Float
            'barcodes': 'String', # [String!]
            'disabledReferenceObjectPKs': 'String', # [String!]
            'graspModelInfo': 'GraspModelInfo', # GraspModelInfo
            'gripperSuctionCupsPerformances': 'GripperSuctionCupsPerformance', # [GripperSuctionCupsPerformance!]
            'mass': 'Float', # Float
            'materialType': 'String', # String
            'modelName': 'String', # String
            # parameters related to robot library objects
            'objectCategory': 'String', # String
            'objectDescription': 'Any', # Any
            'objectPackingId': 'String', # String
            'objectType': 'String', # String
            'referenceObjectPKs': 'String', # [String!]
            'transferSpeedMult': 'Float', # Float
            'vendorName': 'String', # String
        },

        # Blob of data, belonging to an environment, blobs are usually support files and images.
        'Blob': {
            # Content type of the blob.
            'contentType': 'String', # String
            # Timestamp when the blob was created.
            'created': 'DateTime', # DateTime
            # ID of the blob.
            'id': 'String', # String!
            # Timestamp when the blob was last modified.
            'modified': 'DateTime', # DateTime
            # Size of the blob in bytes
            'size': 'Int', # Int
        },

        'Stats': {
            'dateLastDetected': 'DateTime', # DateTime
            'dateLastPicked': 'DateTime', # DateTime
        },

        'Unit': {
            'unitName': 'String', # String!
            'unitScale': 'Float', # Float!
        },

        # Environment represents an OpenRAVE environment.
        'Environment': {
            # For environments containing a single body, these are indexed readonly properties extracted deep inside the body.
            'attributes': 'Attributes', # Attributes
            # Last author who modified the environment.
            'author': 'String', # String!
            # List of blobs belonging to this environment.
            'blobs': 'Blob', # [Blob]
            # List of bodies in the environment.
            'bodies': 'Body', # [Body]
            # Number of bodies inside the environment, readonly property.
            'bodyCount': 'Int', # Int
            # Timestamp when the environment was created.
            'created': 'DateTime', # DateTime
            # Description of the environment.
            'description': 'String', # String
            # Not used at the momemnt.
            'disabledReferenceEnvironmentIds': 'String', # [String!]
            # Gravity direction and magnitude of the environment, unit in meters per second squared.
            'gravity': 'Float', # [Float!]
            # ID of the environment.
            'id': 'String', # String!
            # List of keywords tagged on the environment.
            'keywords': 'String', # [String!]
            # Timestamp when the environment was last modified.
            'modified': 'DateTime', # DateTime
            # Name of the environment.
            'name': 'String', # String
            # Not used at the momemnt.
            'referenceEnvironmentIds': 'String', # [String!]
            # For robot files and linking the environment to a file stored on disk.
            'referenceFilename': 'String', # String
            # Latest revision of the environment.
            'revision': 'Int', # Int!
            # Stats recorded for this environment.
            'stats': 'Stats', # Stats
            # Length unit used in the environment.
            'unit': 'Unit', # Unit
        },

        # Revision of an environment, contains backward and forward differences.
        'Revision': {
            'author': 'String', # String!
            # Environment represents an OpenRAVE environment.
            'backward': 'Environment', # Environment
            'created': 'DateTime', # DateTime
            # Environment represents an OpenRAVE environment.
            'forward': 'Environment', # Environment
            'id': 'Int', # Int!
            'message': 'String', # String
            'modified': 'DateTime', # DateTime
        },

        # Optional list query parameters, used to filter returned results.
        'ListOptionsInput': {
            # Groupping to be applied to the result, such as ["field_subField", "field2"].
            'groups': 'String', # [String!]
            # Limit the returned results to first few.
            'first': 'Int', # Int
            # Offset the returned results, skip amount specified by offset.
            'offset': 'Int', # Int
            # Filters to be applied to the result, such as "field_subField__in=a,b,c".
            'filters': 'String', # [String!]
            # Ordering to be applied to the result, such as ["-field_subField", "field2"].
            'orders': 'String', # [String!]
        },

        # Meta information returned by the query.
        'ListMeta': {
            # Total number of entries.
            'totalCount': 'Int', # Int!
        },

        'ListAttachedSensorsReturnValue': {
            # A list of attached sensors.
            'attachedSensors': 'AttachedSensor', # [AttachedSensor]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListBodiesReturnValue': {
            # A list of bodies.
            'bodies': 'Body', # [Body]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListConnectedBodiesReturnValue': {
            # A list of connected bodies.
            'connectedBodies': 'ConnectedBody', # [ConnectedBody]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListEnvironmentsReturnValue': {
            # A list of environments.
            'environments': 'Environment', # [Environment]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGeometriesReturnValue': {
            # A list of geometries.
            'geometries': 'Geometry', # [Geometry]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGrabbedsReturnValue': {
            # A list of grabbed.
            'grabbeds': 'Grabbed', # [Grabbed]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGraspSetsReturnValue': {
            # A list of grasp sets.
            'graspSets': 'GraspSet', # [GraspSet]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGripperInfosReturnValue': {
            # A list of gripper infos.
            'gripperInfos': 'GripperInfo', # [GripperInfo]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListIKParameterizationsReturnValue': {
            # A list of ikparams.
            'ikParams': 'IKParameterization', # [IKParameterization]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListJointsReturnValue': {
            # A list of joints.
            'joints': 'Joint', # [Joint]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListLinksReturnValue': {
            # A list of links.
            'links': 'Link', # [Link]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListPositionConfigurationsReturnValue': {
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
            # A list of position configurations.
            'positionConfigurations': 'PositionConfiguration', # [PositionConfiguration]!
        },

        'ListRevisionsReturnValue': {
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
            # A list of revisions.
            'revisions': 'Revision', # [Revision]!
        },

        'ListToolsReturnValue': {
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
            # A list of tools.
            'tools': 'Tool', # [Tool]!
        },

        'CameraIntrinsicsInput': {
            'distortionModel': 'String', # String!
            'distortionCoeffs': 'Float', # [Float!]!
            'fx': 'Float', # Float!
            'fy': 'Float', # Float!
            'cx': 'Float', # Float!
            'cy': 'Float', # Float!
            'focalLength': 'Float', # Float!
        },

        'SensorGeometryInput': {
            # deprecated, keep for backcompat conversion
            'sensorReference': 'String', # String
            'hardwareId': 'String', # String
            'targetRegion': 'String', # String
            'intrinsics': 'CameraIntrinsicsInput', # CameraIntrinsicsInput
            'width': 'Int', # Int
            'height': 'Int', # Int
            'measurementTime': 'Float', # Float
            'gain': 'Float', # Float
        },

        # Attached sensor on a robot.
        'AttachedSensorInput': {
            'sensorMaker': 'String', # String
            'referenceAttachedSensorName': 'String', # String
            'deleted': 'Boolean', # Boolean
            'transform': 'Float', # [Float!]
            'sensorGeometry': 'SensorGeometryInput', # SensorGeometryInput
            'sensorModel': 'String', # String
            'id': 'String', # String
            'linkName': 'String', # String
            'type': 'String', # String
            'name': 'String', # String
        },

        'DOFValueInput': {
            'jointName': 'String', # String!
            'jointAxis': 'Int', # Int!
            'value': 'Float', # Float!
        },

        'GraspModelInfoInput': {
            'minNumSupportedFaces': 'Int', # Int
        },

        'RegionInput': {
            'name': 'String', # String!
            'transform': 'Float', # [Float!]!
            'extents': 'Float', # [Float!]!
        },

        'JointConfigurationStateInput': {
            'connectedBodyName': 'String', # String!
            # If a joint configuration is part of a connected body (ie ConnectedBodyName is not empty), JointName does not include the ConnectedBodyName prefix, instead it is the pure joint name
            'jointName': 'String', # String!
            'jointValue': 'Float', # Float!
        },

        'PositionConfigurationInput': {
            'id': 'String', # String
            'name': 'String', # String
            'jointConfigurationStates': 'JointConfigurationStateInput', # [JointConfigurationStateInput!]
            'deleted': 'Boolean', # Boolean
        },

        # Grasp set describes a set of ikparams.
        'GraspSetInput': {
            'name': 'String', # String
            # name of the ikparams
            'ikParams': 'String', # [String!]
            'deleted': 'Boolean', # Boolean
            'id': 'String', # String
        },

        'SuctionCupsPerformanceInput': {
            'score': 'String', # String!
            'suctionCupPartTypes': 'String', # [String!]!
        },

        'GripperSuctionCupsPerformanceInput': {
            'gripperName': 'String', # String!
            'suctionCupsPerformances': 'SuctionCupsPerformanceInput', # [SuctionCupsPerformanceInput!]!
        },

        'FloatsParameterInput': {
            'id': 'String', # String
            'values': 'Float', # [Float!]
            'deleted': 'Boolean', # Boolean
        },

        # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        'IKParameterizationInput': {
            'translate': 'Float', # [Float!]
            'name': 'String', # String
            'angle': 'Float', # Float
            'id': 'String', # String
            'quaternion': 'Float', # [Float!]
            'localTranslate': 'Float', # [Float!]
            'direction': 'Float', # [Float!]
            'deleted': 'Boolean', # Boolean
            'customData': 'FloatsParameterInput', # [FloatsParameterInput]
            # One of: Transform6D, Rotation3D, Translation3D, Direction3D, Ray4D, Lookat3D, TranslationDirection5D, TranslationXY2D, TranslationXYOrientation3D, TranslationLocalGlobal6D, TranslationXAxisAngle4D, TranslationYAxisAngle4D, TranslationZAxisAngle4D, TranslationXAxisAngleZNorm4D, TranslationYAxisAngleXNorm4D, TranslationZAxisAngleYNorm4D.
            'type': 'String', # String
            'transform': 'Float', # [Float!]
        },

        'BodyParametersInput': {
            # parameters related to robot library objects
            'objectCategory': 'String', # String
            'graspModelInfo': 'GraspModelInfoInput', # GraspModelInfoInput
            'totalNumBarCodes': 'Int', # Int
            'referenceObjectPKs': 'String', # [String!]
            'distSensorMismatchReplanThresh': 'Float', # Float
            'regions': 'RegionInput', # [RegionInput!]
            'vendorName': 'String', # String
            'positionConfigurations': 'PositionConfigurationInput', # [PositionConfigurationInput]
            'packingOrderPriority': 'Int', # Int
            'barcodes': 'String', # [String!]
            'objectType': 'String', # String
            'modelName': 'String', # String
            'disabledReferenceObjectPKs': 'String', # [String!]
            'materialType': 'String', # String
            # Grasp set describes a set of ikparams.
            'graspSets': 'GraspSetInput', # [GraspSetInput]
            'transferSpeedMult': 'Float', # Float
            'allowedPlacementOrientations': 'Int', # Int
            'gripperSuctionCupsPerformances': 'GripperSuctionCupsPerformanceInput', # [GripperSuctionCupsPerformanceInput!]
            'objectPackingId': 'String', # String
            'knownBarCodeFaces': 'Int', # Int
            'bottomBoxDistSensorThresh': 'Float', # Float
            'barcodeScanningGain': 'Float', # Float
            'minViableRegionSize2D': 'Float', # [Float!]
            # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
            'ikParams': 'IKParameterizationInput', # [IKParameterizationInput]
            'minSuctionForce': 'Float', # Float
            'objectDescription': 'Any', # Any
        },

        'SpeedLimitForToolNameInput': {
            'toolname': 'String', # String!
            'maxToolSpeed': 'Float', # Float!
        },

        'SafetySpeedConstraintsInfoInput': {
            'speedLimitForToolNames': 'SpeedLimitForToolNameInput', # [SpeedLimitForToolNameInput!]!
            # if omitted, is SafetySpeedConstraintsInfo in effect by default? if so, need the tri-state
            'use': 'Boolean', # Boolean
        },

        'StringsParameterInput': {
            'id': 'String', # String
            'values': 'String', # [String!]
            'deleted': 'Boolean', # Boolean
        },

        'IntsParameterInput': {
            'values': 'Int', # [Int!]
            'deleted': 'Boolean', # Boolean
            'id': 'String', # String
        },

        'RobotMotionParametersInput': {
            'maxToolSpeedRotation': 'Float', # Float
            'dynamicsConstraintsType': 'String', # String
            'safetySpeedConstraintsInfo': 'SafetySpeedConstraintsInfoInput', # SafetySpeedConstraintsInfoInput
            'controllerDOFMults': 'Float', # [Float!]
            'robotMaker': 'String', # String
            'controllerDOFOrder': 'Int', # [Int!]
            'stringParameters': 'StringsParameterInput', # [StringsParameterInput]
            'floatParameters': 'FloatsParameterInput', # [FloatsParameterInput]
            'maxToolAccelTranslation': 'Float', # Float
            'controllerTimestep': 'Float', # Float
            'ikTypeName': 'String', # String
            'robotSimulationFile': 'String', # String
            'intParameters': 'IntsParameterInput', # [IntsParameterInput]
            'robotType': 'String', # String
            'maxToolAccelRotation': 'Float', # Float
            'maxToolSpeedTranslation': 'Float', # Float
            'robotController': 'String', # String
            'robotLanguage': 'String', # String
        },

        'ReadableInterfacesInput': {
            'bodyparameters': 'BodyParametersInput', # BodyParametersInput
            'robotmotionparameters': 'RobotMotionParametersInput', # RobotMotionParametersInput
            'extendable': 'Any', # Any
        },

        # Tool describes a manipulator coordinate system of a robot.
        'ToolInput': {
            'direction': 'Float', # [Float!]
            'toolChangerConnectedBodyToolName': 'String', # String
            'ikSolverType': 'String', # String
            'chuckingDirections': 'Float', # [Float!]
            'transform': 'Float', # [Float!]
            'toolChangerLinkName': 'String', # String
            'id': 'String', # String
            'baseLinkName': 'String', # String
            'name': 'String', # String
            'ikChainEndLinkName': 'String', # String
            'effectorLinkName': 'String', # String
            'gripperJointNames': 'String', # [String!]
            'deleted': 'Boolean', # Boolean
            'restrictGraspSetNames': 'String', # [String!]
            'grippername': 'String', # String
        },

        'StringParameterInput': {
            'value': 'String', # String
            'deleted': 'Boolean', # Boolean
            'id': 'String', # String
        },

        'SideWallInput': {
            'transform': 'Float', # [Float!]!
            'halfExtents': 'Float', # [Float!]!
            'type': 'String', # String!
        },

        # triangle mesh
        'MeshInput': {
            'vertices': 'Float', # [Float!]!
            'indices': 'Int', # [Int!]!
        },

        'CalibrationBoardParametersInput': {
            'dotsDistanceX': 'Float', # Float
            'dotsDistanceY': 'Float', # Float
            'dotColor': 'Float', # [Float!]
            'patternName': 'String', # String
            'dotDiameterDistanceRatio': 'Float', # Float
            'bigDotDiameterDistanceRatio': 'Float', # Float
            'numDotsX': 'Int', # Int
            'numDotsY': 'Int', # Int
        },

        # Geometry belonging to a link.
        'GeometryInput': {
            'id': 'String', # String
            # for container
            'outerExtents': 'Float', # [Float!]
            'bottom': 'Float', # [Float!]
            'modifiable': 'Boolean', # Boolean
            'innerSizeY': 'Float', # Float
            # transform of geometry in link space
            'transform': 'Float', # [Float!]
            # for cage
            'baseExtents': 'Float', # [Float!]
            'sideWalls': 'SideWallInput', # [SideWallInput!]
            'innerExtents': 'Float', # [Float!]
            # type of geometry, can be one of: box, container, cage, sphere, cylinder, trimesh
            'type': 'String', # String
            # for trimesh
            'mesh': 'MeshInput', # MeshInput
            'innerSizeZ': 'Float', # Float
            # for box
            'halfExtents': 'Float', # [Float!]
            # for sphere and cylinder
            'radius': 'Float', # Float
            'bottomCross': 'Float', # [Float!]
            'innerSizeX': 'Float', # Float
            # for calibration board
            'calibrationBoardParameters': 'CalibrationBoardParametersInput', # CalibrationBoardParametersInput
            'visible': 'Boolean', # Boolean
            'diffuseColor': 'Float', # [Float!]
            'transparency': 'Float', # Float
            'ambientColor': 'Float', # [Float!]
            'deleted': 'Boolean', # Boolean
            'name': 'String', # String
            # for cylinder only
            'height': 'Float', # Float
        },

        # Link of a body, containing geometries.
        'LinkInput': {
            # Link transform is relative to body, same convention as in OpenRAVE.
            'transform': 'Float', # [Float!]
            # Mass of the link, in kg.
            'mass': 'Float', # Float
            'inertiaMoments': 'Float', # [Float!]
            'isStatic': 'Boolean', # Boolean
            # ID of the link.
            'id': 'String', # String
            # The frame for inertia and center of mass of the link in the link's coordinate system.
            'massTransform': 'Float', # [Float!]
            'stringParameters': 'StringParameterInput', # [StringParameterInput]
            'forcedAdjacentLinks': 'String', # [String!]
            'floatParameters': 'FloatsParameterInput', # [FloatsParameterInput]
            'deleted': 'Boolean', # Boolean
            # Name of the link.
            'name': 'String', # String
            'isEnabled': 'Boolean', # Boolean
            'intParameters': 'IntsParameterInput', # [IntsParameterInput]
            # List of geometries in this link.
            'geometries': 'GeometryInput', # [GeometryInput]
        },

        # Gripper info describing the gripper properties, used for planning gripper operations.
        'GripperInfoInput': {
            'id': 'String', # String
            'name': 'String', # String
            'grippertype': 'String', # String
            'gripperJointNames': 'String', # [String!]
            'extendable': 'Any', # Any
            'deleted': 'Boolean', # Boolean
        },

        'ElectricMotorActuatorInput': {
            'viscousFriction': 'Float', # Float
            'assignedPowerRating': 'Float', # Float
            'maxSpeed': 'Float', # Float
            'maxInstantaneousTorque': 'Float', # Float
            'noLoadSpeed': 'Float', # Float
            'gearRatio': 'Float', # Float
            'nominalSpeedTorquePoints': 'Float', # [[Float!]!]
            'torqueConstant': 'Float', # Float
            'coloumbFriction': 'Float', # Float
            'nominalVoltage': 'Float', # Float
            'startingCurrent': 'Float', # Float
            'speedConstant': 'Float', # Float
            'maxSpeedTorquePoints': 'Float', # [[Float!]!]
            'nominalTorque': 'Float', # Float
            'modelType': 'String', # String
            'terminalResistance': 'Float', # Float
            'stallTorque': 'Float', # Float
            'rotorInertia': 'Float', # Float
        },

        'MimicInput': {
            'equations': 'String', # [String!]!
        },

        # Joint in a body describing the linkage between a parent link and a child link.
        'JointInput': {
            # revolute or prismatic
            'type': 'String', # String
            'isActive': 'Boolean', # Boolean
            'id': 'String', # String
            'currentValues': 'Float', # [Float!]
            'hardMaxVel': 'Float', # [Float!]
            'offsets': 'Float', # [Float!]
            'childLinkName': 'String', # String
            'anchors': 'Float', # [Float!]
            'maxInertia': 'Float', # [Float!]
            'weights': 'Float', # [Float!]
            'maxAccel': 'Float', # [Float!]
            'hardMaxAccel': 'Float', # [Float!]
            'lowerLimit': 'Float', # [Float!]
            'deleted': 'Boolean', # Boolean
            'stringParameters': 'StringParameterInput', # [StringParameterInput]
            'intParameters': 'IntsParameterInput', # [IntsParameterInput]
            'name': 'String', # String
            'electricMotorActuator': 'ElectricMotorActuatorInput', # ElectricMotorActuatorInput
            'hardMaxJerk': 'Float', # [Float!]
            'upperLimit': 'Float', # [Float!]
            'isCircular': 'Int', # [Int!]
            'maxJerk': 'Float', # [Float!]
            'maxVel': 'Float', # [Float!]
            'floatParameters': 'FloatsParameterInput', # [FloatsParameterInput]
            # axis and anchor are relative to parent link in openrave
            'axes': 'Float', # [[Float!]!]
            'mimics': 'MimicInput', # [MimicInput!]
            'resolutions': 'Float', # [Float!]
            'parentLinkName': 'String', # String
            'maxTorque': 'Float', # [Float!]
        },

        # Grabbed object describes a grabbing relationship.
        'GrabbedInput': {
            'grabbedName': 'String', # String
            'robotLinkName': 'String', # String
            'transform': 'Float', # [Float!]
            'ignoreRobotLinkNames': 'String', # [String!]
            'deleted': 'Boolean', # Boolean
            'id': 'String', # String
        },

        'ConnectedBodyInput': {
            # Link of a body, containing geometries.
            'links': 'LinkInput', # [LinkInput]
            # Attached sensor on a robot.
            'attachedSensors': 'AttachedSensorInput', # [AttachedSensorInput]
            # Gripper info describing the gripper properties, used for planning gripper operations.
            'gripperInfos': 'GripperInfoInput', # [GripperInfoInput]
            'linkName': 'String', # String
            'deleted': 'Boolean', # Boolean
            'isActive': 'Int', # Int
            'name': 'String', # String
            'uri': 'String', # String
            'transform': 'Float', # [Float!]
            # Tool describes a manipulator coordinate system of a robot.
            'tools': 'ToolInput', # [ToolInput]
            'id': 'String', # String
            # Joint in a body describing the linkage between a parent link and a child link.
            'joints': 'JointInput', # [JointInput]
        },

        # Body or a robot in an environment.
        'BodyInput': {
            'modified': 'DateTime', # DateTime
            'dofValues': 'DOFValueInput', # [DOFValueInput!]
            'readableInterfaces': 'ReadableInterfacesInput', # ReadableInterfacesInput
            'referenceUri': 'String', # String
            # Attached sensor on a robot.
            'attachedSensors': 'AttachedSensorInput', # [AttachedSensorInput]
            # whether the body is a kinbody or a robot
            'isRobot': 'Boolean', # Boolean
            # Tool describes a manipulator coordinate system of a robot.
            'tools': 'ToolInput', # [ToolInput]
            'created': 'DateTime', # DateTime
            'name': 'String', # String
            # Link of a body, containing geometries.
            'links': 'LinkInput', # [LinkInput]
            # interfaceType, e.g. GenericRobot
            'interfaceType': 'String', # String
            # Gripper info describing the gripper properties, used for planning gripper operations.
            'gripperInfos': 'GripperInfoInput', # [GripperInfoInput]
            'deleted': 'Boolean', # Boolean
            'id': 'String', # String
            # Joint in a body describing the linkage between a parent link and a child link.
            'joints': 'JointInput', # [JointInput]
            # Grabbed object describes a grabbing relationship.
            'grabbed': 'GrabbedInput', # [GrabbedInput]
            'connectedBodies': 'ConnectedBodyInput', # [ConnectedBodyInput]
            'transform': 'Float', # [Float!]
            # just a hint, not supposed to be used by any logic
            'referenceUriHint': 'String', # String
        },

        # Blob of data, belonging to an environment, blobs are usually support files and images.
        'BlobInput': {
            # Content type of the blob.
            'contentType': 'String', # String
        },

        'UnitInput': {
            'unitName': 'String', # String!
            'unitScale': 'Float', # Float!
        },

        # Environment represents an OpenRAVE environment.
        'EnvironmentInput': {
            # Not used at the momemnt.
            'referenceEnvironmentIds': 'String', # [String!]
            # List of blobs belonging to this environment.
            'blobs': 'BlobInput', # [BlobInput]
            # For robot files and linking the environment to a file stored on disk.
            'referenceFilename': 'String', # String
            # Name of the environment.
            'name': 'String', # String
            # List of keywords tagged on the environment.
            'keywords': 'String', # [String!]
            # Gravity direction and magnitude of the environment, unit in meters per second squared.
            'gravity': 'Float', # [Float!]
            # Length unit used in the environment.
            'unit': 'UnitInput', # UnitInput
            # List of bodies in the environment.
            'bodies': 'BodyInput', # [BodyInput]
            # ID of the environment.
            'id': 'String', # String
            # Description of the environment.
            'description': 'String', # String
            # Not used at the momemnt.
            'disabledReferenceEnvironmentIds': 'String', # [String!]
        },
    }

#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED, SEE HEADER
#

