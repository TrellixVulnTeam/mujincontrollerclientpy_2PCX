# -*- coding: utf-8 -*-
#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED
# GENERATED BY: mujin_controllerclientpy_generategraphclient.py
# GENERATED AGAINST: mujinwebstack/2.0.136.dc6eb249687ae47395366280b065e7fa49ca6244-dirty
#

from .controllergraphclientutils import ControllerGraphClientBase

class ControllerGraphQueries:

    def GetAttachedSensor(self, attachedSensorId, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a particular attached sensor on a robot.

        Args:
            attachedSensorId (String!): ID of the existing attached sensor.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def GetBody(self, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a particular body in an environment.

        Args:
            bodyId (String!): ID of the existing body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def GetBodyParameters(self, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def GetConnectedBody(self, bodyId, connectedBodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a particular connected body on a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBodyId (String!): ID of the existing connected body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def GetEnvironment(self, environmentId, units=None, fields=None, timeout=None):
        """Get a specific environment.

        Args:
            environmentId (String!): ID of an existing environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def GetGeometry(self, bodyId, environmentId, geometryId, linkId, units=None, fields=None, timeout=None):
        """Get a particular geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometryId (String!): ID of the existing geometry.
            linkId (String!): ID of the link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def GetGrabbed(self, bodyId, environmentId, grabbedId, units=None, fields=None, timeout=None):
        """Get a particular grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbedId (String!): ID of the existing grabbed object.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def GetGraspSet(self, bodyId, environmentId, graspSetId, units=None, fields=None, timeout=None):
        """Get a particular grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSetId (String!): ID of the existing grasp set.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def GetGripperInfo(self, bodyId, environmentId, gripperInfoId, units=None, fields=None, timeout=None):
        """Get a particular gripper info on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfoId (String!): ID of the existing gripper info.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def GetIKParameterization(self, bodyId, environmentId, ikParamId, units=None, fields=None, timeout=None):
        """Get a particular ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParamId (String!): ID of the existing ikparam.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def GetJoint(self, bodyId, environmentId, jointId, units=None, fields=None, timeout=None):
        """Get a particular joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            jointId (String!): ID of the existing joint.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('jointId', 'String!', jointId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def GetLink(self, bodyId, environmentId, linkId, units=None, fields=None, timeout=None):
        """Get a particular link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            linkId (String!): ID of the existing link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def GetPositionConfiguration(self, bodyId, environmentId, positionConfigurationId, units=None, fields=None, timeout=None):
        """Get a particular position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfigurationId (String!): ID of the existing position configuration.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def GetRevision(self, environmentId, revisionId, units=None, fields=None, timeout=None):
        """Get a particular revision of an environment.

        Args:
            environmentId (String!): ID of the environment.
            revisionId (Int!): ID of the revision.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Revision: Revision of an environment, contains backward and forward differences.
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('revisionId', 'Int!', revisionId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRevision', parameterNameTypeValues=parameterNameTypeValues, returnType='Revision', fields=fields, timeout=timeout)

    def GetRobotMotionParameters(self, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Get a robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
Also includes information about the robot model and maker.
These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def GetTool(self, bodyId, environmentId, toolId, units=None, fields=None, timeout=None):
        """Get a particular tool on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            toolId (String!): ID of the existing tool.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def IsAttachedSensorMoveable(self, attachedSensorName, bodyName, environmentId, fields=None, timeout=None):
        """Check and see if attached sensor is moveable on a robot

        Args:
            attachedSensorName (String!): Name of the attached sensor, could be in the format of "connectedBodyName_attachedSensorName"
            bodyName (String!): Name of the body to check
            environmentId (String!): ID of the environment to check
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Boolean!: 
        """
        parameterNameTypeValues = [
            ('attachedSensorName', 'String!', attachedSensorName),
            ('bodyName', 'String!', bodyName),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='IsAttachedSensorMoveable', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ListAttachedSensors(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List attached sensors defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListAttachedSensorsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAttachedSensors', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAttachedSensorsReturnValue', fields=fields, timeout=timeout)

    def ListBodies(self, environmentId, options=None, units=None, fields=None, timeout=None):
        """List bodies in an environment.

        Args:
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListBodiesReturnValue: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListBodiesReturnValue', fields=fields, timeout=timeout)

    def ListConnectedBodies(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List connected bodies defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListConnectedBodiesReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConnectedBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConnectedBodiesReturnValue', fields=fields, timeout=timeout)

    def ListEnvironments(self, options=None, units=None, fields=None, timeout=None):
        """List all environments.

        Args:
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListEnvironmentsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEnvironmentsReturnValue', fields=fields, timeout=timeout)

    def ListGeometries(self, bodyId, environmentId, linkId, options=None, units=None, fields=None, timeout=None):
        """List geometries in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            linkId (String!): ID of the link.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGeometriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGeometries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGeometriesReturnValue', fields=fields, timeout=timeout)

    def ListGrabbeds(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List grabbed objects in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGrabbedsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGrabbeds', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGrabbedsReturnValue', fields=fields, timeout=timeout)

    def ListGraspSets(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List grasp sets in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGraspSetsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGraspSets', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGraspSetsReturnValue', fields=fields, timeout=timeout)

    def ListGripperInfos(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List gripper infos defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListGripperInfosReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGripperInfos', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGripperInfosReturnValue', fields=fields, timeout=timeout)

    def ListIKParameterizations(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List ikparams in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListIKParameterizationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListIKParameterizations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListIKParameterizationsReturnValue', fields=fields, timeout=timeout)

    def ListJoints(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List joints in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListJointsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListJoints', parameterNameTypeValues=parameterNameTypeValues, returnType='ListJointsReturnValue', fields=fields, timeout=timeout)

    def ListLinks(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List links in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListLinksReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLinks', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLinksReturnValue', fields=fields, timeout=timeout)

    def ListPositionConfigurations(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List position configurations in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListPositionConfigurationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListPositionConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListPositionConfigurationsReturnValue', fields=fields, timeout=timeout)

    def ListRevisions(self, environmentId, options=None, units=None, fields=None, timeout=None):
        """List revisions of an environment.

        Args:
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListRevisionsReturnValue: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListRevisions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListRevisionsReturnValue', fields=fields, timeout=timeout)

    def ListTools(self, bodyId, environmentId, options=None, units=None, fields=None, timeout=None):
        """List tools defined on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            options (ListOptionsInput): Optional list query parameters, used to filter returned results.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ListToolsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListTools', parameterNameTypeValues=parameterNameTypeValues, returnType='ListToolsReturnValue', fields=fields, timeout=timeout)


class ControllerGraphMutations:

    def CopyAttachedSensor(self, attachedSensor, attachedSensorId, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing attached sensor on a robot to a new one.

        Args:
            attachedSensor (AttachedSensorInput!): Properties to change on the copied the attached sensor.
            attachedSensorId (String!): ID of the existing attached sensor.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CopyBody(self, body, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing body in an environment to a new one.

        Args:
            body (BodyInput!): Properties to be applied on the copied body.
            bodyId (String!): ID of the existing body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CopyConnectedBody(self, bodyId, connectedBody, connectedBodyId, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing connected body on a robot to a new one.

        Args:
            bodyId (String!): ID of the body.
            connectedBody (ConnectedBodyInput!): Properties to change on the copied the connected body.
            connectedBodyId (String!): ID of the existing connected body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CopyEnvironment(self, environment, environmentId, units=None, fields=None, timeout=None):
        """Copy an existing environment to a new one.

        Args:
            environment (EnvironmentInput!): Properties to be applied on the copied environment.
            environmentId (String!): ID of the existing environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CopyGeometry(self, bodyId, environmentId, geometry, geometryId, linkId, units=None, fields=None, timeout=None):
        """Copy an existing geometry in a link to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometry (GeometryInput!): Properties to be applied on the copied geometry.
            geometryId (String!): ID of the existing geometry.
            linkId (String!): ID of the link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CopyGrabbed(self, bodyId, environmentId, grabbed, grabbedId, units=None, fields=None, timeout=None):
        """Copy an existing grabbed object in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbed (GrabbedInput!): Properties to be applied on the copied grabbed object.
            grabbedId (String!): ID of the existing grabbed object.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CopyGraspSet(self, bodyId, environmentId, graspSet, graspSetId, units=None, fields=None, timeout=None):
        """Copy an existing grasp set in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSet (GraspSetInput!): Properties to be applied on the copied grasp set.
            graspSetId (String!): ID of the existing grasp set.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CopyGripperInfo(self, bodyId, environmentId, gripperInfo, gripperInfoId, units=None, fields=None, timeout=None):
        """Copy an existing gripper info on a robot to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfo (GripperInfoInput!): Properties to change on the copied the gripper info.
            gripperInfoId (String!): ID of the existing gripper info.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CopyIKParameterization(self, bodyId, environmentId, ikParam, ikParamId, units=None, fields=None, timeout=None):
        """Copy an existing ikparam in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParam (IKParameterizationInput!): Properties to be applied on the copied ikparam.
            ikParamId (String!): ID of the existing ikparam.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CopyJoint(self, bodyId, environmentId, joint, jointId, units=None, fields=None, timeout=None):
        """Copy an existing joint in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            joint (JointInput!): Properties to be applied on the copied joint.
            jointId (String!): ID of the existing joint.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('jointId', 'String!', jointId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def CopyLink(self, bodyId, environmentId, link, linkId, units=None, fields=None, timeout=None):
        """Copy an existing link in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            link (LinkInput!): Properties to be applied on the copied link.
            linkId (String!): ID of the existing link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CopyPositionConfiguration(self, bodyId, environmentId, positionConfiguration, positionConfigurationId, units=None, fields=None, timeout=None):
        """Copy an existing position configuration in a body to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfiguration (PositionConfigurationInput!): Properties to be applied on the copied position configuration.
            positionConfigurationId (String!): ID of the existing position configuration.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CopyTool(self, bodyId, environmentId, tool, toolId, units=None, fields=None, timeout=None):
        """Copy an existing tool on a robot to a new one.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            tool (ToolInput!): Properties to change on the copied the tool.
            toolId (String!): ID of the existing tool.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def CreateAttachedSensor(self, attachedSensor, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Create a new attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput!): Properties for the new attached sensor.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CreateBody(self, body, environmentId, units=None, fields=None, timeout=None):
        """Create a new body in an environment.

        Args:
            body (BodyInput!): Properties to be applied on the newly created body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CreateBodyParameters(self, bodyId, bodyParameters, environmentId, units=None, fields=None, timeout=None):
        """Create a new body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            bodyParameters (BodyParametersInput!): Properties to be applied on the newly created body parameters.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def CreateConnectedBody(self, bodyId, connectedBody, environmentId, units=None, fields=None, timeout=None):
        """Create a new connected body on a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBody (ConnectedBodyInput!): Properties for the new connected body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CreateEnvironment(self, environment, units=None, fields=None, timeout=None):
        """Create a new environment.

        Args:
            environment (EnvironmentInput!): Properties to be applied on the newly created environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CreateGeometry(self, bodyId, environmentId, geometry, linkId, units=None, fields=None, timeout=None):
        """Create a new geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometry (GeometryInput!): Properties to be applied on the newly created geometry.
            linkId (String!): ID of the existing geometry.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CreateGrabbed(self, bodyId, environmentId, grabbed, units=None, fields=None, timeout=None):
        """Create a new grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbed (GrabbedInput!): Properties to be applied on the newly created grabbed object.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CreateGraspSet(self, bodyId, environmentId, graspSet, units=None, fields=None, timeout=None):
        """Create a new grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSet (GraspSetInput!): Properties to be applied on the newly created grasp set.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CreateGripperInfo(self, bodyId, environmentId, gripperInfo, units=None, fields=None, timeout=None):
        """Create a new gripper info on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfo (GripperInfoInput!): Properties for the new gripper info.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CreateIKParameterization(self, bodyId, environmentId, ikParam, units=None, fields=None, timeout=None):
        """Create a new ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParam (IKParameterizationInput!): Properties to be applied on the newly created ikparam.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CreateJoint(self, bodyId, environmentId, joint, units=None, fields=None, timeout=None):
        """Create a new joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            joint (JointInput!): Properties to be applied on the newly created joint.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def CreateLink(self, bodyId, environmentId, link, units=None, fields=None, timeout=None):
        """Create a new link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            link (LinkInput!): Properties to be applied on the newly created link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CreatePositionConfiguration(self, bodyId, environmentId, positionConfiguration, units=None, fields=None, timeout=None):
        """Create a new position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfiguration (PositionConfigurationInput!): Properties to be applied on the newly created position configuration.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreatePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CreateRobotMotionParameters(self, bodyId, environmentId, robotMotionParameters, units=None, fields=None, timeout=None):
        """Create a new robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput!): Properties to be applied on the newly created robot motion parameters.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
Also includes information about the robot model and maker.
These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def CreateTool(self, bodyId, environmentId, tool, units=None, fields=None, timeout=None):
        """Create a new tool on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            tool (ToolInput!): Properties for the new tool.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def DeleteAttachedSensor(self, attachedSensorId, bodyId, environmentId, fields=None, timeout=None):
        """Delete a attached sensor from a robot.

        Args:
            attachedSensorId (String!): ID of the attached sensor to delete.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBody(self, bodyId, environmentId, fields=None, timeout=None):
        """Delete a body in an environment.

        Args:
            bodyId (String!): ID of the body to delete.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBodyParameters(self, bodyId, environmentId, fields=None, timeout=None):
        """Delete a body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteConnectedBody(self, bodyId, connectedBodyId, environmentId, fields=None, timeout=None):
        """Delete a connected body from a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBodyId (String!): ID of the connected body to delete.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteEnvironment(self, environmentId, fields=None, timeout=None):
        """Delete an environment.

        Args:
            environmentId (String!): ID of the environment to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGeometry(self, bodyId, environmentId, geometryId, linkId, fields=None, timeout=None):
        """Delete a geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometryId (String!): ID of the geometry to delete.
            linkId (String!): ID of the link.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGrabbed(self, bodyId, environmentId, grabbedId, fields=None, timeout=None):
        """Delete a grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbedId (String!): ID of the grabbed object to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGraspSet(self, bodyId, environmentId, graspSetId, fields=None, timeout=None):
        """Delete a grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSetId (String!): ID of the grasp set to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGripperInfo(self, bodyId, environmentId, gripperInfoId, fields=None, timeout=None):
        """Delete a gripper info from a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfoId (String!): ID of the gripper info to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteIKParameterization(self, bodyId, environmentId, ikParamId, fields=None, timeout=None):
        """Delete a ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParamId (String!): ID of the ikparam to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteJoint(self, bodyId, environmentId, jointId, fields=None, timeout=None):
        """Delete a joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            jointId (String!): ID of the joint to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('jointId', 'String!', jointId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteLink(self, bodyId, environmentId, linkId, fields=None, timeout=None):
        """Delete a link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            linkId (String!): ID of the link to be deleted.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeletePositionConfiguration(self, bodyId, environmentId, positionConfigurationId, fields=None, timeout=None):
        """Delete a position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfigurationId (String!): ID of the position configuration to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeletePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteRobotMotionParameters(self, bodyId, environmentId, fields=None, timeout=None):
        """Delete a robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteTool(self, bodyId, environmentId, toolId, fields=None, timeout=None):
        """Delete a tool from a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            toolId (String!): ID of the tool to delete.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ExtractBody(self, body, bodyId, environment, environmentId, units=None, fields=None, timeout=None):
        """Extract a body from an environment as a new single body environment.

        Args:
            body (BodyInput!): Properties to be applied on the newly created body.
            bodyId (String!): ID of the body to extract.
            environment (EnvironmentInput!): Properties to be applied on the newly created environment.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ExtractBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ModifyAttachedSensor(self, attachedSensor, attachedSensorId, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput!): Proprties to modify on the attached sensor.
            attachedSensorId (String!): ID of the attached sensor to modify.
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def ModifyBody(self, body, bodyId, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing body in an environment.

        Args:
            body (BodyInput!): Properties to be modified on the body.
            bodyId (String!): ID of the body to modify.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def ModifyBodyParameters(self, bodyId, bodyParameters, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing body parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            bodyParameters (BodyParametersInput!): Properties to be modified on the body parameters.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def ModifyConnectedBody(self, bodyId, connectedBody, connectedBodyId, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing connected body on a robot.

        Args:
            bodyId (String!): ID of the body.
            connectedBody (ConnectedBodyInput!): Proprties to modify on the connected body.
            connectedBodyId (String!): ID of the connected body to modify.
            environmentId (String!): ID of the environment.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def ModifyEnvironment(self, environment, environmentId, units=None, fields=None, timeout=None):
        """Modify an existing environment.

        Args:
            environment (EnvironmentInput!): Properties to be modified on the existing environment.
            environmentId (String!): ID of the environment to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ModifyGeometry(self, bodyId, environmentId, geometry, geometryId, linkId, units=None, fields=None, timeout=None):
        """Modify an existing geometry in a link.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            geometry (GeometryInput!): Properties to be modified on the geometry.
            geometryId (String!): ID of the geometry to modify.
            linkId (String!): ID of the link.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def ModifyGrabbed(self, bodyId, environmentId, grabbed, grabbedId, units=None, fields=None, timeout=None):
        """Modify an existing grabbed object in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            grabbed (GrabbedInput!): Properties to be modified on the grabbed object.
            grabbedId (String!): ID of the grabbed object to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def ModifyGraspSet(self, bodyId, environmentId, graspSet, graspSetId, units=None, fields=None, timeout=None):
        """Modify an existing grasp set in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            graspSet (GraspSetInput!): Properties to be modified on the grasp set.
            graspSetId (String!): ID of the grasp set to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def ModifyGripperInfo(self, bodyId, environmentId, gripperInfo, gripperInfoId, units=None, fields=None, timeout=None):
        """Modify an existing gripper info on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            gripperInfo (GripperInfoInput!): Proprties to modify on the gripper info.
            gripperInfoId (String!): ID of the gripper info to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def ModifyIKParameterization(self, bodyId, environmentId, ikParam, ikParamId, units=None, fields=None, timeout=None):
        """Modify an existing ikparam in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            ikParam (IKParameterizationInput!): Properties to be modified on the ikparam.
            ikParamId (String!): ID of the ikparam to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def ModifyJoint(self, bodyId, environmentId, joint, jointId, units=None, fields=None, timeout=None):
        """Modify an existing joint in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            joint (JointInput!): Properties to be modified on the joint.
            jointId (String!): ID of the joint to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('jointId', 'String!', jointId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def ModifyLink(self, bodyId, environmentId, link, linkId, units=None, fields=None, timeout=None):
        """Modify an existing link in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            link (LinkInput!): Properties to be modified on the link.
            linkId (String!): ID of the link to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def ModifyPositionConfiguration(self, bodyId, environmentId, positionConfiguration, positionConfigurationId, units=None, fields=None, timeout=None):
        """Modify an existing position configuration in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            positionConfiguration (PositionConfigurationInput!): Properties to be modified on the position configuration.
            positionConfigurationId (String!): ID of the position configuration to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def ModifyRobotMotionParameters(self, bodyId, environmentId, robotMotionParameters, units=None, fields=None, timeout=None):
        """Modify an existing robot motion parameters in a body.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput!): Properties to be modified on the robot motion parameters.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
Also includes information about the robot model and maker.
These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def ModifyTool(self, bodyId, environmentId, tool, toolId, units=None, fields=None, timeout=None):
        """Modify an existing tool on a robot.

        Args:
            bodyId (String!): ID of the body.
            environmentId (String!): ID of the environment.
            tool (ToolInput!): Proprties to modify on the tool.
            toolId (String!): ID of the tool to modify.
            units (UnitSelectionInput): Optional unit selection.
            fields (list or dict): Optionally specify a subset of fields to return.
            timeout (float): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)


class ControllerGraphClient(ControllerGraphClientBase, ControllerGraphQueries, ControllerGraphMutations):

    typeDatabase = {

        # Optional unit selection.
        'UnitSelectionInput': {
            # Unit for length values, one of: m, meter, cm, mm, um, nm, inch.
            'lengthUnit': 'String', # String
            # Unit for mass values, one of: g, kg.
            'massUnit': 'String', # String
            # Unit for angles, one of: deg, rad.
            'angleUnit': 'String', # String
        },

        # The intrinsic parameters of the camera.
        'CameraIntrinsics': {
            'cx': 'Float', # Float!
            'cy': 'Float', # Float!
            'distortionCoeffs': 'Float', # [Float!]!
            'distortionModel': 'String', # String!
            'focalLength': 'Float', # Float!
            # The focal length in X direction
            'fx': 'Float', # Float!
            # The focal length in Y direction
            'fy': 'Float', # Float!
        },

        # The geometry of a sensor with additional data.
        'SensorGeometry': {
            'gain': 'Float', # Float
            'hardwareId': 'String', # String
            # The height of the sensor image (in pixels)
            'height': 'Int', # Int
            # The intrinsic parameters of the camera.
            'intrinsics': 'CameraIntrinsics', # CameraIntrinsics
            'measurementTime': 'Float', # Float
            # Deprecated. Keeping it only for backcompatibility conversion.
            'sensorReference': 'String', # String
            # The region that the sensor points/looks at
            'targetRegion': 'String', # String
            # The width of the sensor image (in pixels)
            'width': 'Int', # Int
        },

        # A sensor that is attached to a robot, e.g. a camera or a force sensor.
        'AttachedSensor': {
            # If the sensor has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # The unique ID of the attached sensor.
            'id': 'String', # String!
            # The link to which the sensor is attached.
            'linkName': 'String', # String
            # The non-unique name of the attached sensor.
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            'referenceAttachedSensorName': 'String', # String
            # Sensor geometry, including camera intrinsics and more.
            'sensorGeometry': 'SensorGeometry', # SensorGeometry
            'sensorMaker': 'String', # String
            'sensorModel': 'String', # String
            # The transform from the link's frame to the sensor.
            'transform': 'Float', # [Float!]
            'type': 'String', # String
        },

        # Gripper info describing the gripper properties, used for planning gripper operations.
        'GripperInfo': {
            # If the GripperInfo has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            'extendable': 'Any', # Any!
            'gripperJointNames': 'String', # [String!]
            'grippertype': 'String', # String
            'id': 'String', # String!
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
        },

        # Description of a joint's electric actuator.
        'ElectricMotorActuator': {
            'assignedPowerRating': 'Float', # Float
            'coloumbFriction': 'Float', # Float
            'gearRatio': 'Float', # Float
            'maxInstantaneousTorque': 'Float', # Float
            'maxSpeed': 'Float', # Float
            'maxSpeedTorquePoints': 'Float', # [[Float!]!]
            'modelType': 'String', # String
            'noLoadSpeed': 'Float', # Float
            'nominalSpeedTorquePoints': 'Float', # [[Float!]!]
            'nominalTorque': 'Float', # Float
            'nominalVoltage': 'Float', # Float
            'rotorInertia': 'Float', # Float
            'speedConstant': 'Float', # Float
            'stallTorque': 'Float', # Float
            'startingCurrent': 'Float', # Float
            'terminalResistance': 'Float', # Float
            'torqueConstant': 'Float', # Float
            'viscousFriction': 'Float', # Float
        },

        # A named parameter holding an array of float values
        'FloatsParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            'values': 'Float', # [Float!]
        },

        # A named parameter holding an array of integer values
        'IntsParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            'values': 'Int', # [Int!]
        },

        # Equations for mimic joints, whose motion depends on another joint.
        # 
        # See http://warp.povusers.org/FunctionParser/fparser.html for a full description of the equation format.
        'Mimic': {
            'equations': 'String', # [String!]!
        },

        # A named parameter holding a single string value
        'StringParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            'value': 'String', # String
        },

        # Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        'Joint': {
            # The anchors of the joint. Axes and anchors are relative to the parent link.
            'anchors': 'Float', # [Float!]
            # The axes of the joint. Axes and anchors are relative to the parent link
            'axes': 'Float', # [[Float!]!]
            # The child link of the joint
            'childLinkName': 'String', # String
            'currentValues': 'Float', # [Float!]
            # If the joint has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # Description of a joint's electric actuator.
            'electricMotorActuator': 'ElectricMotorActuator', # ElectricMotorActuator
            # A named parameter holding an array of float values
            'floatParameters': 'FloatsParameter', # [FloatsParameter]
            'hardMaxAccel': 'Float', # [Float!]
            'hardMaxJerk': 'Float', # [Float!]
            'hardMaxVel': 'Float', # [Float!]
            # The unique ID of the joint
            'id': 'String', # String!
            # A named parameter holding an array of integer values
            'intParameters': 'IntsParameter', # [IntsParameter]
            'isActive': 'Boolean', # Boolean
            # True if a joint axis has an identification at its lower and upper limits. An identification of the lower and upper limits means that once the joint reaches its upper limit, it is also at its lower limit. The most common identification on revolute joints is at -pi and pi. 'circularity' means that the joint does not stop at the limits.
            'isCircular': 'Int', # [Int!]
            # The lower limits for the joint's position values
            'lowerLimit': 'Float', # [Float!]
            # Maximum acceleration values
            'maxAccel': 'Float', # [Float!]
            'maxInertia': 'Float', # [Float!]
            # Maximum jerk values (the derivative of the acceleration)
            'maxJerk': 'Float', # [Float!]
            # Maximum torque values
            'maxTorque': 'Float', # [Float!]
            # Maximum velocity values of determined size
            'maxVel': 'Float', # [Float!]
            # Equations for mimic joints, which move depending on this joint.
            'mimics': 'Mimic', # [Mimic!]
            # The non-unique name of the joint
            'name': 'String', # String
            # Internal wrap offset parameter for revolute joints. Wrap offsets are needed for rotation joints since the range is limited to 2*pi. The offset allows the joint to function in the range [-pi+offset,pi+offset].
            'offsets': 'Float', # [Float!]
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # The parent link of the joint
            'parentLinkName': 'String', # String
            # The discretization of the joint used when line-collision checking. The resolutions should be set as large as possible such that the joint will not go through obstacles.
            'resolutions': 'Float', # [Float!]
            # A named parameter holding a single string value
            'stringParameters': 'StringParameter', # [StringParameter]
            # Can be "revolute" or "prismatic"
            'type': 'String', # String
            # The upper limits for the joint's position values
            'upperLimit': 'Float', # [Float!]
            # The weight of each joint for computing distance metrics
            'weights': 'Float', # [Float!]
        },

        # The parameter of a calibration board. Calibration boards are used to determine the position of a camera relative to the robot.
        'CalibrationBoardParameters': {
            'bigDotDiameterDistanceRatio': 'Float', # Float
            'dotColor': 'Float', # [Float!]
            'dotDiameterDistanceRatio': 'Float', # Float
            'dotsDistanceX': 'Float', # Float
            'dotsDistanceY': 'Float', # Float
            'numDotsX': 'Int', # Int
            'numDotsY': 'Int', # Int
            'patternName': 'String', # String
        },

        # triangle mesh
        'Mesh': {
            'indices': 'Int', # [Int!]!
            'vertices': 'Float', # [Float!]!
        },

        # The side walls of e.g. a cage or roll cart.
        'SideWall': {
            'halfExtents': 'Float', # [Float!]!
            'transform': 'Float', # [Float!]!
            'type': 'String', # String!
        },

        # Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        'Geometry': {
            'ambientColor': 'Float', # [Float!]
            # TODO(felixvd): What do these values describe?
            # (Cage measurement (1/5)): The extents of the base of a cage (an object to stack boxes into)
            'baseExtents': 'Float', # [Float!]
            # (Container measurement (4/4)): The normal vector of the bottom surface
            'bottom': 'Float', # [Float!]
            # (Container measurement (3/4)): The cross vector of the bottom surface
            'bottomCross': 'Float', # [Float!]
            # For calibration boards
            'calibrationBoardParameters': 'CalibrationBoardParameters', # CalibrationBoardParameters
            # If the geometry has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            'diffuseColor': 'Float', # [Float!]
            # Half the extents of a box, in each dimension. For a crate of size 1 m x 1 m x 2 m, this vector would be [0.5, 0.5, 1.0]
            'halfExtents': 'Float', # [Float!]
            # For cylinders only
            'height': 'Float', # Float
            'id': 'String', # String!
            # (Container measurement (2/4)): The inner extent of the container.
            'innerExtents': 'Float', # [Float!]
            # (Cage measurement (2/5)):
            'innerSizeX': 'Float', # Float
            # (Cage measurement (3/5)):
            'innerSizeY': 'Float', # Float
            # (Cage measurement (4/5)):
            'innerSizeZ': 'Float', # Float
            # For trimeshes
            'mesh': 'Mesh', # Mesh
            'modifiable': 'Boolean', # Boolean
            'name': 'String', # String
            # (Container measurement (1/4)): The outer extent of the container
            'outerExtents': 'Float', # [Float!]
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # For spheres and cylinders
            'radius': 'Float', # Float
            # (Cage measurement (5/5)):
            'sideWalls': 'SideWall', # [SideWall!]
            # Transform of geometry in link space
            'transform': 'Float', # [Float!]
            'transparency': 'Float', # Float
            # Type of geometry, can be one of: box, container, cage, sphere, cylinder, trimesh
            'type': 'String', # String
            'visible': 'Boolean', # Boolean
        },

        # Link of a body, containing geometries. Links can be connected by joints.
        'Link': {
            # If the link has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # A named parameter holding an array of float values
            'floatParameters': 'FloatsParameter', # [FloatsParameter]
            # Links which will be considered "adjacent". Collisions between adjacent links are ignored.
            'forcedAdjacentLinks': 'String', # [String!]
            # List of geometries in this link. Defined in the link's coordinate system.
            'geometries': 'Geometry', # [Geometry]
            # The unique ID of the link
            'id': 'String', # String!
            # The moments of inertia around each rotation axis
            'inertiaMoments': 'Float', # [Float!]
            # A named parameter holding an array of integer values
            'intParameters': 'IntsParameter', # [IntsParameter]
            # Whether collision is enabled for this link.
            'isEnabled': 'Boolean', # Boolean
            # Whether the link is static and cannot move depending on dof values.
            'isStatic': 'Boolean', # Boolean
            # The mass of the link, in kg.
            'mass': 'Float', # Float
            # The frame for inertia and center of mass of the link, in the link's coordinate system.
            'massTransform': 'Float', # [Float!]
            # The non-unique name of the link
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # Relative transform to parent link. Not saved in file, only used by API to update multiple link transforms through relative transform.
            'relativeTransform': 'Float', # [Float!]
            # A named parameter holding a single string value
            'stringParameters': 'StringParameter', # [StringParameter]
            # The link transform is relative to the body's coordinate system. Same convention as in OpenRAVE. For child links, the transform depends on the joint values and the parent link. A link that has only children and no parents is the body's "base link".
            'transform': 'Float', # [Float!]
        },

        # Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        'Tool': {
            # The link at which the IK chain begins
            'baseLinkName': 'String', # String
            'chuckingDirections': 'Float', # [Float!]
            # If the tool has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # The direction in which the tool should approach an object (e.g. to grasp)
            'direction': 'Float', # [Float!]
            # The link in which the tool is defined
            'effectorLinkName': 'String', # String
            # The names of the joints in the gripper
            'gripperJointNames': 'String', # [String!]
            # The name of the gripper
            'grippername': 'String', # String
            # The unique ID of the tool.
            'id': 'String', # String!
            # The link at which the IK solver ends
            'ikChainEndLinkName': 'String', # String
            # The type of Inverse Kinematics (IK) solver to use
            'ikSolverType': 'String', # String
            # Name of the tool.
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # When this parameter is not empty, only grasp sets listed here are applicable for this manipulator.
            'restrictGraspSetNames': 'String', # [String!]
            # The tool name in each connected body to use when the connected body is activated by the tool changer.
            'toolChangerConnectedBodyToolName': 'String', # String
            # The link name that the connected bodies are attached to that belongs to this tool changer.
            'toolChangerLinkName': 'String', # String
            # The Transform from the Effector Link to the tool coordinate frame.
            'transform': 'Float', # [Float!]
        },

        # A body that is connected to another.
        'ConnectedBody': {
            # Sensors that are attached to this connected body.
            'attachedSensors': 'AttachedSensor', # [AttachedSensor]
            # If the connected body has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # GripperInfos that are part of this connected body.
            'gripperInfos': 'GripperInfo', # [GripperInfo]
            # The unique identifier of this connected body.
            'id': 'String', # String!
            # If False, this body will not be considered during collision checking.
            'isActive': 'Int', # Int
            # The joints that are part of this connected body
            'joints': 'Joint', # [Joint]
            # The link to which the body is connected.
            'linkName': 'String', # String
            # The links that are part of this connected body
            'links': 'Link', # [Link]
            # The name of this connected body.
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # Tools that are part of this connected body.
            'tools': 'Tool', # [Tool]
            # The transform from the link to the connected body.
            'transform': 'Float', # [Float!]
            # URI to the Environment that provides the original body to be connected.
            'uri': 'String', # String
        },

        # The value of a degree of freedom (e.g. rotation, translation)
        'DOFValue': {
            'jointAxis': 'Int', # Int!
            'jointName': 'String', # String!
            'value': 'Float', # Float!
        },

        # An object that is currently grabbed (grasped) by the robot.
        'Grabbed': {
            # If the grabbed object has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # The non-unique name of the grabbed object.
            'grabbedName': 'String', # String
            # The unique ID of the grabbed object.
            'id': 'String', # String!
            # Links for which collision with the object should be ignored
            'ignoreRobotLinkNames': 'String', # [String!]
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # The link that the grabbed object is attached to
            'robotLinkName': 'String', # String
            # Transform from the robot link the object is attached to
            'transform': 'Float', # [Float!]
        },

        'GraspModelInfo': {
            'minNumSupportedFaces': 'Int', # Int
        },

        # Represents a set of IKParams at which an object may be grasped.
        'GraspSet': {
            # If the grasp set has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            # name of the ikparams
            'ikParams': 'String', # [String!]
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
        },

        # Scores the performance of a set of suction cups.
        'SuctionCupsPerformance': {
            # Can be either 'SCS_Unknown', 'SCS_Bad', 'SCS_Good' or 'SCS_VeryGood'
            'score': 'String', # String!
            # The model numbers of the suction cups
            'suctionCupPartTypes': 'String', # [String!]!
        },

        # Scores how a gripper's suction cups are performing.
        'GripperSuctionCupsPerformance': {
            'gripperName': 'String', # String!
            # Scores the performance of a set of suction cups.
            'suctionCupsPerformances': 'SuctionCupsPerformance', # [SuctionCupsPerformance!]!
        },

        # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        'IKParameterization': {
            'angle': 'Float', # Float
            # A named parameter holding an array of float values
            'customData': 'FloatsParameter', # [FloatsParameter]
            # If the IK parameterization has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details
            'deleted': 'Boolean', # Boolean!
            # A direction vector (e.g. for approach or depart motions)
            'direction': 'Float', # [Float!]
            # The unique identifier of the IKParam
            'id': 'String', # String!
            # A translation the local coordinate system (transformed by this Transform)
            'localTranslate': 'Float', # [Float!]
            # The non-unique name of the IKParam
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            'quaternion': 'Float', # [Float!]
            'transform': 'Float', # [Float!]
            # A translation in the global coordinate system
            'translate': 'Float', # [Float!]
            # One of: Transform6D, Rotation3D, Translation3D, Direction3D, Ray4D, Lookat3D, TranslationDirection5D, TranslationXY2D, TranslationXYOrientation3D, TranslationLocalGlobal6D, TranslationXAxisAngle4D, TranslationYAxisAngle4D, TranslationZAxisAngle4D, TranslationXAxisAngleZNorm4D, TranslationYAxisAngleXNorm4D, TranslationZAxisAngleYNorm4D.
            'type': 'String', # String
        },

        # Describes the state (position) of a single joint.
        # 
        # This is a name-value tuple so that joint values can be sent for a subset of a kinematic chain without ambiguity.
        'JointConfigurationState': {
            # If this is not empty, this joint is part of a connected body.
            'connectedBodyName': 'String', # String!
            # If a joint configuration is part of a connected body (i.e. ConnectedBodyName is not empty), JointName is not prefixed with the ConnectedBodyName. Instead, it is the pure joint name.
            'jointName': 'String', # String!
            'jointValue': 'Float', # Float!
        },

        # A robot configuration defined via joint values.
        'PositionConfiguration': {
            # If the PositionConfiguration has been deleted or not. See the \"Differential reference system\" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # The unique identifier of the PositionConfiguration
            'id': 'String', # String!
            # The joint states that make up the PositionConfiguration
            'jointConfigurationStates': 'JointConfigurationState', # [JointConfigurationState!]
            # The non-unique name of the PositionConfiguration
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
        },

        # Parameters of an OpenRAVE 'Body'
        'BodyParameters': {
            'allowedPlacementOrientations': 'Int', # Int
            'barcodeScanningGain': 'Float', # Float
            'barcodes': 'String', # [String!]
            'bottomBoxDistSensorThresh': 'Float', # Float
            'disabledReferenceObjectPKs': 'String', # [String!]
            'distSensorMismatchReplanThresh': 'Float', # Float
            'graspModelInfo': 'GraspModelInfo', # GraspModelInfo
            # Represents a set of IKParams at which an object may be grasped.
            'graspSets': 'GraspSet', # [GraspSet]
            # Scores how a gripper's suction cups are performing.
            'gripperSuctionCupsPerformances': 'GripperSuctionCupsPerformance', # [GripperSuctionCupsPerformance!]
            # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
            'ikParams': 'IKParameterization', # [IKParameterization]
            'knownBarCodeFaces': 'Int', # Int
            'materialType': 'String', # String
            'minSuctionForce': 'Float', # Float
            'minViableRegionSize2D': 'Float', # [Float!]
            'modelName': 'String', # String
            # parameters related to robot library objects
            'objectCategory': 'String', # String
            'objectDescription': 'Any', # Any
            'objectPackingId': 'String', # String
            'objectType': 'String', # String
            'packingOrderPriority': 'Int', # Int
            # A robot configuration defined via joint values.
            'positionConfigurations': 'PositionConfiguration', # [PositionConfiguration]
            'referenceObjectPKs': 'String', # [String!]
            'totalNumBarCodes': 'Int', # Int
            'transferSpeedMult': 'Float', # Float
            'vendorName': 'String', # String
        },

        # The cartesian speed limit for a tool.
        'SpeedLimitForToolName': {
            # Maximum cartesian (XYZ) tool speed in m/s or mm/s (depending on the unit of the scene)
            'maxToolSpeed': 'Float', # Float!
            # The name of the tool this speed limit applies to
            'toolname': 'String', # String!
        },

        # Safety-relevant tool speed limits.
        # 
        # This limits the robot speed during execution, so that the robot can be slowed down when e.g. a light curtain detects a human in the workspace. This speed limit only affects execution, not planning - use the RobotMotionParameters to affect the planning result.
        'SafetySpeedConstraintsInfo': {
            # The cartesian speed limit for a tool.
            'speedLimitForToolNames': 'SpeedLimitForToolName', # [SpeedLimitForToolName!]!
            # if omitted, is SafetySpeedConstraintsInfo in effect by default? if so, need the tri-state
            'use': 'Boolean', # Boolean
        },

        # A named parameter holding an array of string values
        'StringsParameter': {
            'deleted': 'Boolean', # Boolean!
            'id': 'String', # String!
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            'values': 'String', # [String!]
        },

        # A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
        # Also includes information about the robot model and maker.
        # These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        'RobotMotionParameters': {
            'controllerDOFMults': 'Float', # [Float!]
            'controllerDOFOrder': 'Int', # [Int!]
            'controllerTimestep': 'Float', # Float
            'dynamicsConstraintsType': 'String', # String
            # A named parameter holding an array of float values
            'floatParameters': 'FloatsParameter', # [FloatsParameter]
            'ikTypeName': 'String', # String
            # A named parameter holding an array of integer values
            'intParameters': 'IntsParameter', # [IntsParameter]
            'maxToolAccelRotation': 'Float', # Float
            'maxToolAccelTranslation': 'Float', # Float
            'maxToolSpeedRotation': 'Float', # Float
            'maxToolSpeedTranslation': 'Float', # Float
            'robotController': 'String', # String
            'robotLanguage': 'String', # String
            'robotMaker': 'String', # String
            'robotSimulationFile': 'String', # String
            'robotType': 'String', # String
            # Safety-relevant tool speed limits.
            # 
            # This limits the robot speed during execution, so that the robot can be slowed down when e.g. a light curtain detects a human in the workspace. This speed limit only affects execution, not planning - use the RobotMotionParameters to affect the planning result.
            'safetySpeedConstraintsInfo': 'SafetySpeedConstraintsInfo', # SafetySpeedConstraintsInfo
            # A named parameter holding an array of string values
            'stringParameters': 'StringsParameter', # [StringsParameter]
        },

        # Parameters of an OpenRAVE body.
        'ReadableInterfaces': {
            # Parameters of an OpenRAVE 'Body'
            'bodyparameters': 'BodyParameters', # BodyParameters
            'extendable': 'Any', # Any!
            # A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
            # Also includes information about the robot model and maker.
            # These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
            'robotmotionparameters': 'RobotMotionParameters', # RobotMotionParameters
        },

        # An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        'Body': {
            # A list of attached sensors (e.g. cameras, force sensors, light curtains...)
            'attachedSensors': 'AttachedSensor', # [AttachedSensor]
            # Bodies that are connected to this one
            'connectedBodies': 'ConnectedBody', # [ConnectedBody]
            'created': 'DateTime', # DateTime
            # If the body has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean!
            # The values of the body's joints.
            'dofValues': 'DOFValue', # [DOFValue!]
            # Grabbed items
            'grabbed': 'Grabbed', # [Grabbed]
            # A list of possible grippers
            'gripperInfos': 'GripperInfo', # [GripperInfo]
            # The unique identifier of this body.
            'id': 'String', # String!
            # interfaceType, e.g. GenericRobot
            'interfaceType': 'String', # String
            # Whether the body is a kinBody or a robot
            'isRobot': 'Boolean', # Boolean
            # The joints that make up the body. One joint connects to one link.
            'joints': 'Joint', # [Joint]
            # The links that are part of the body. Each link is connected to one joint.
            'links': 'Link', # [Link]
            'modified': 'DateTime', # DateTime
            # The (non-unique) name of this body.
            'name': 'String', # String
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # Parameters of an OpenRAVE body.
            'readableInterfaces': 'ReadableInterfaces', # ReadableInterfaces
            # The "parent" of this body. Fields that are undefined in this body will be taken from the parent (recursively).
            'referenceUri': 'String', # String
            # Just a hint (internal). Not to be used by any logic.
            'referenceUriHint': 'String', # String
            # Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
            'tools': 'Tool', # [Tool]
            # The transform from the parent (the world).
            'transform': 'Float', # [Float!]
        },

        # The attributes of an object
        'Attributes': {
            # Half the size of the axis-aligned bounding box, in each dimension. For a crate of size 1 m x 1 m x 2 m, this vector would be [0.5, 0.5, 1.0]
            'aabbHalfExtents': 'Float', # [Float!]
            'barcodeScanningGain': 'Float', # Float
            'barcodes': 'String', # [String!]
            'disabledReferenceObjectPKs': 'String', # [String!]
            'graspModelInfo': 'GraspModelInfo', # GraspModelInfo
            # Scores how a gripper's suction cups are performing.
            'gripperSuctionCupsPerformances': 'GripperSuctionCupsPerformance', # [GripperSuctionCupsPerformance!]
            # The mass in kg
            'mass': 'Float', # Float
            'materialType': 'String', # String
            'modelName': 'String', # String
            # parameters related to robot library objects
            'objectCategory': 'String', # String
            'objectDescription': 'Any', # Any
            'objectPackingId': 'String', # String
            'objectType': 'String', # String
            'referenceObjectPKs': 'String', # [String!]
            'transferSpeedMult': 'Float', # Float
            'vendorName': 'String', # String
        },

        # Blob of data, belonging to an environment. Blobs are usually support files and images.
        'Blob': {
            # Content type of the blob.
            'contentType': 'String', # String
            # Timestamp when the blob was created.
            'created': 'DateTime', # DateTime
            # ID of the blob.
            'id': 'String', # String!
            # Timestamp when the blob was last modified.
            'modified': 'DateTime', # DateTime
            # Parent IDs, exposed to API but not saved internally.
            'parentIds': 'String', # [String!]!
            # Size of the blob in bytes
            'size': 'Int', # Int
        },

        # Statistics about the system
        'Stats': {
            'dateLastDetected': 'DateTime', # DateTime
            'dateLastPicked': 'DateTime', # DateTime
        },

        # A unit used for a value.
        'Unit': {
            # The name of the unit
            'unitName': 'String', # String!
            # The scaling factor to convert this unit to a basic SI unit. For mm, this is 0.001
            'unitScale': 'Float', # Float!
        },

        # An OpenRAVE Environment
        'Environment': {
            # For environments containing a single body, these are indexed readonly properties extracted deep inside the body.
            'attributes': 'Attributes', # Attributes
            # Last author who modified the environment.
            'author': 'String', # String!
            # List of blobs belonging to this environment.
            'blobs': 'Blob', # [Blob]
            # List of bodies in the environment. Bodies represent robots, manipulators, grippers, physical objects and more
            'bodies': 'Body', # [Body]
            # Number of bodies inside the environment, readonly property.
            'bodyCount': 'Int', # Int
            # Timestamp when the environment was created.
            'created': 'DateTime', # DateTime
            # Description of the environment.
            'description': 'String', # String
            # Not used at the moment.
            'disabledReferenceEnvironmentIds': 'String', # [String!]
            # Gravity direction and magnitude of the environment, unit in meters per second squared.
            'gravity': 'Float', # [Float!]
            # The unique ID of the environment.
            'id': 'String', # String!
            # List of keywords tagged on the environment.
            'keywords': 'String', # [String!]
            # Timestamp when the environment was last modified.
            'modified': 'DateTime', # DateTime
            # Name of the environment. Not guaranteed to be unique.
            'name': 'String', # String
            # Not used at the moment.
            'referenceEnvironmentIds': 'String', # [String!]
            # For robot files and linking the environment to a file stored on disk.
            'referenceFilename': 'String', # String
            # Latest revision of the environment.
            'revision': 'Int', # Int!
            # Stats recorded for this environment.
            'stats': 'Stats', # Stats
            # Length unit used in the environment.
            'unit': 'Unit', # Unit
        },

        # Revision of an environment, contains backward and forward differences.
        'Revision': {
            'author': 'String', # String!
            # An OpenRAVE Environment
            'backward': 'Environment', # Environment
            'created': 'DateTime', # DateTime
            # An OpenRAVE Environment
            'forward': 'Environment', # Environment
            'id': 'Int', # Int!
            'message': 'String', # String
            'modified': 'DateTime', # DateTime
        },

        # Optional list query parameters, used to filter returned results.
        'ListOptionsInput': {
            # Groupping to be applied to the result, such as ["field_subField", "field2"].
            'groups': 'String', # [String!]
            # Limit the returned results to first few.
            'first': 'Int', # Int
            # Offset the returned results, skip amount specified by offset.
            'offset': 'Int', # Int
            # Filters to be applied to the result, such as "field_subField__in=a,b,c".
            'filters': 'String', # [String!]
            # Ordering to be applied to the result, such as ["-field_subField", "field2"].
            'orders': 'String', # [String!]
        },

        # Meta information returned by the query.
        'ListMeta': {
            # Total number of entries.
            'totalCount': 'Int', # Int!
        },

        'ListAttachedSensorsReturnValue': {
            # A list of attached sensors.
            'attachedSensors': 'AttachedSensor', # [AttachedSensor]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListBodiesReturnValue': {
            # A list of bodies.
            'bodies': 'Body', # [Body]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListConnectedBodiesReturnValue': {
            # A list of connected bodies.
            'connectedBodies': 'ConnectedBody', # [ConnectedBody]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListEnvironmentsReturnValue': {
            # A list of environments.
            'environments': 'Environment', # [Environment]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGeometriesReturnValue': {
            # A list of geometries.
            'geometries': 'Geometry', # [Geometry]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGrabbedsReturnValue': {
            # A list of grabbed.
            'grabbeds': 'Grabbed', # [Grabbed]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGraspSetsReturnValue': {
            # A list of grasp sets.
            'graspSets': 'GraspSet', # [GraspSet]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListGripperInfosReturnValue': {
            # A list of gripper infos.
            'gripperInfos': 'GripperInfo', # [GripperInfo]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListIKParameterizationsReturnValue': {
            # A list of ikparams.
            'ikParams': 'IKParameterization', # [IKParameterization]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListJointsReturnValue': {
            # A list of joints.
            'joints': 'Joint', # [Joint]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListLinksReturnValue': {
            # A list of links.
            'links': 'Link', # [Link]!
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
        },

        'ListPositionConfigurationsReturnValue': {
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
            # A list of position configurations.
            'positionConfigurations': 'PositionConfiguration', # [PositionConfiguration]!
        },

        'ListRevisionsReturnValue': {
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
            # A list of revisions.
            'revisions': 'Revision', # [Revision]!
        },

        'ListToolsReturnValue': {
            # Meta information returned by the query.
            'meta': 'ListMeta', # ListMeta
            # A list of tools.
            'tools': 'Tool', # [Tool]!
        },

        # The intrinsic parameters of the camera.
        'CameraIntrinsicsInput': {
            'distortionCoeffs': 'Float', # [Float!]!
            # The focal length in X direction
            'fx': 'Float', # Float!
            # The focal length in Y direction
            'fy': 'Float', # Float!
            'cx': 'Float', # Float!
            'cy': 'Float', # Float!
            'focalLength': 'Float', # Float!
            'distortionModel': 'String', # String!
        },

        # The geometry of a sensor with additional data.
        'SensorGeometryInput': {
            'measurementTime': 'Float', # Float
            'gain': 'Float', # Float
            # Deprecated. Keeping it only for backcompatibility conversion.
            'sensorReference': 'String', # String
            'hardwareId': 'String', # String
            # The region that the sensor points/looks at
            'targetRegion': 'String', # String
            # The intrinsic parameters of the camera.
            'intrinsics': 'CameraIntrinsicsInput', # CameraIntrinsicsInput
            # The width of the sensor image (in pixels)
            'width': 'Int', # Int
            # The height of the sensor image (in pixels)
            'height': 'Int', # Int
        },

        # A sensor that is attached to a robot, e.g. a camera or a force sensor.
        'AttachedSensorInput': {
            'type': 'String', # String
            'sensorModel': 'String', # String
            # The unique ID of the attached sensor.
            'id': 'String', # String
            # The non-unique name of the attached sensor.
            'name': 'String', # String
            'referenceAttachedSensorName': 'String', # String
            'sensorMaker': 'String', # String
            # The transform from the link's frame to the sensor.
            'transform': 'Float', # [Float!]
            # The link to which the sensor is attached.
            'linkName': 'String', # String
            # If the sensor has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # Sensor geometry, including camera intrinsics and more.
            'sensorGeometry': 'SensorGeometryInput', # SensorGeometryInput
        },

        # Describes the state (position) of a single joint.
        # 
        # This is a name-value tuple so that joint values can be sent for a subset of a kinematic chain without ambiguity.
        'JointConfigurationStateInput': {
            # If a joint configuration is part of a connected body (i.e. ConnectedBodyName is not empty), JointName is not prefixed with the ConnectedBodyName. Instead, it is the pure joint name.
            'jointName': 'String', # String!
            'jointValue': 'Float', # Float!
            # If this is not empty, this joint is part of a connected body.
            'connectedBodyName': 'String', # String!
        },

        # A robot configuration defined via joint values.
        'PositionConfigurationInput': {
            # The non-unique name of the PositionConfiguration
            'name': 'String', # String
            # The joint states that make up the PositionConfiguration
            'jointConfigurationStates': 'JointConfigurationStateInput', # [JointConfigurationStateInput!]
            # If the PositionConfiguration has been deleted or not. See the \"Differential reference system\" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # The unique identifier of the PositionConfiguration
            'id': 'String', # String
        },

        # A named parameter holding an array of float values
        'FloatsParameterInput': {
            'id': 'String', # String
            'values': 'Float', # [Float!]
            'deleted': 'Boolean', # Boolean
        },

        # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
        'IKParameterizationInput': {
            'angle': 'Float', # Float
            # The unique identifier of the IKParam
            'id': 'String', # String
            # One of: Transform6D, Rotation3D, Translation3D, Direction3D, Ray4D, Lookat3D, TranslationDirection5D, TranslationXY2D, TranslationXYOrientation3D, TranslationLocalGlobal6D, TranslationXAxisAngle4D, TranslationYAxisAngle4D, TranslationZAxisAngle4D, TranslationXAxisAngleZNorm4D, TranslationYAxisAngleXNorm4D, TranslationZAxisAngleYNorm4D.
            'type': 'String', # String
            # A translation in the global coordinate system
            'translate': 'Float', # [Float!]
            # A named parameter holding an array of float values
            'customData': 'FloatsParameterInput', # [FloatsParameterInput]
            # If the IK parameterization has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details
            'deleted': 'Boolean', # Boolean
            # The non-unique name of the IKParam
            'name': 'String', # String
            'quaternion': 'Float', # [Float!]
            'transform': 'Float', # [Float!]
            # A translation the local coordinate system (transformed by this Transform)
            'localTranslate': 'Float', # [Float!]
            # A direction vector (e.g. for approach or depart motions)
            'direction': 'Float', # [Float!]
        },

        'GraspModelInfoInput': {
            'minNumSupportedFaces': 'Int', # Int
        },

        # Represents a set of IKParams at which an object may be grasped.
        'GraspSetInput': {
            # name of the ikparams
            'ikParams': 'String', # [String!]
            # If the grasp set has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            'id': 'String', # String
            'name': 'String', # String
        },

        # Scores the performance of a set of suction cups.
        'SuctionCupsPerformanceInput': {
            # Can be either 'SCS_Unknown', 'SCS_Bad', 'SCS_Good' or 'SCS_VeryGood'
            'score': 'String', # String!
            # The model numbers of the suction cups
            'suctionCupPartTypes': 'String', # [String!]!
        },

        # Scores how a gripper's suction cups are performing.
        'GripperSuctionCupsPerformanceInput': {
            'gripperName': 'String', # String!
            # Scores the performance of a set of suction cups.
            'suctionCupsPerformances': 'SuctionCupsPerformanceInput', # [SuctionCupsPerformanceInput!]!
        },

        # Parameters of an OpenRAVE 'Body'
        'BodyParametersInput': {
            'barcodeScanningGain': 'Float', # Float
            'bottomBoxDistSensorThresh': 'Float', # Float
            # A robot configuration defined via joint values.
            'positionConfigurations': 'PositionConfigurationInput', # [PositionConfigurationInput]
            'transferSpeedMult': 'Float', # Float
            'minSuctionForce': 'Float', # Float
            'barcodes': 'String', # [String!]
            # Inverse Kinematics Parameter describe a pose in space with additional parameters that can affect grasping.
            'ikParams': 'IKParameterizationInput', # [IKParameterizationInput]
            'objectType': 'String', # String
            'packingOrderPriority': 'Int', # Int
            'modelName': 'String', # String
            'graspModelInfo': 'GraspModelInfoInput', # GraspModelInfoInput
            'totalNumBarCodes': 'Int', # Int
            # Represents a set of IKParams at which an object may be grasped.
            'graspSets': 'GraspSetInput', # [GraspSetInput]
            'materialType': 'String', # String
            'objectDescription': 'Any', # Any
            'objectPackingId': 'String', # String
            'disabledReferenceObjectPKs': 'String', # [String!]
            # Scores how a gripper's suction cups are performing.
            'gripperSuctionCupsPerformances': 'GripperSuctionCupsPerformanceInput', # [GripperSuctionCupsPerformanceInput!]
            # parameters related to robot library objects
            'objectCategory': 'String', # String
            'vendorName': 'String', # String
            'allowedPlacementOrientations': 'Int', # Int
            'minViableRegionSize2D': 'Float', # [Float!]
            'referenceObjectPKs': 'String', # [String!]
            'distSensorMismatchReplanThresh': 'Float', # Float
            'knownBarCodeFaces': 'Int', # Int
        },

        # A named parameter holding an array of string values
        'StringsParameterInput': {
            'id': 'String', # String
            'values': 'String', # [String!]
            'deleted': 'Boolean', # Boolean
        },

        # A named parameter holding an array of integer values
        'IntsParameterInput': {
            'id': 'String', # String
            'values': 'Int', # [Int!]
            'deleted': 'Boolean', # Boolean
        },

        # The cartesian speed limit for a tool.
        'SpeedLimitForToolNameInput': {
            # Maximum cartesian (XYZ) tool speed in m/s or mm/s (depending on the unit of the scene)
            'maxToolSpeed': 'Float', # Float!
            # The name of the tool this speed limit applies to
            'toolname': 'String', # String!
        },

        # Safety-relevant tool speed limits.
        # 
        # This limits the robot speed during execution, so that the robot can be slowed down when e.g. a light curtain detects a human in the workspace. This speed limit only affects execution, not planning - use the RobotMotionParameters to affect the planning result.
        'SafetySpeedConstraintsInfoInput': {
            # The cartesian speed limit for a tool.
            'speedLimitForToolNames': 'SpeedLimitForToolNameInput', # [SpeedLimitForToolNameInput!]!
            # if omitted, is SafetySpeedConstraintsInfo in effect by default? if so, need the tri-state
            'use': 'Boolean', # Boolean
        },

        # A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
        # Also includes information about the robot model and maker.
        # These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        'RobotMotionParametersInput': {
            'controllerTimestep': 'Float', # Float
            'robotMaker': 'String', # String
            'controllerDOFOrder': 'Int', # [Int!]
            'robotType': 'String', # String
            'ikTypeName': 'String', # String
            'robotController': 'String', # String
            'maxToolSpeedTranslation': 'Float', # Float
            'maxToolAccelRotation': 'Float', # Float
            'robotSimulationFile': 'String', # String
            'dynamicsConstraintsType': 'String', # String
            # A named parameter holding an array of float values
            'floatParameters': 'FloatsParameterInput', # [FloatsParameterInput]
            # A named parameter holding an array of string values
            'stringParameters': 'StringsParameterInput', # [StringsParameterInput]
            'robotLanguage': 'String', # String
            # A named parameter holding an array of integer values
            'intParameters': 'IntsParameterInput', # [IntsParameterInput]
            'maxToolSpeedRotation': 'Float', # Float
            # Safety-relevant tool speed limits.
            # 
            # This limits the robot speed during execution, so that the robot can be slowed down when e.g. a light curtain detects a human in the workspace. This speed limit only affects execution, not planning - use the RobotMotionParameters to affect the planning result.
            'safetySpeedConstraintsInfo': 'SafetySpeedConstraintsInfoInput', # SafetySpeedConstraintsInfoInput
            'maxToolAccelTranslation': 'Float', # Float
            'controllerDOFMults': 'Float', # [Float!]
        },

        # Parameters of an OpenRAVE body.
        'ReadableInterfacesInput': {
            # Parameters of an OpenRAVE 'Body'
            'bodyparameters': 'BodyParametersInput', # BodyParametersInput
            # A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
            # Also includes information about the robot model and maker.
            # These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
            'robotmotionparameters': 'RobotMotionParametersInput', # RobotMotionParametersInput
            'extendable': 'Any', # Any
        },

        # The value of a degree of freedom (e.g. rotation, translation)
        'DOFValueInput': {
            'jointName': 'String', # String!
            'jointAxis': 'Int', # Int!
            'value': 'Float', # Float!
        },

        # A body that is connected to another.
        'ConnectedBodyInput': {
            # The link to which the body is connected.
            'linkName': 'String', # String
            # URI to the Environment that provides the original body to be connected.
            'uri': 'String', # String
            # The transform from the link to the connected body.
            'transform': 'Float', # [Float!]
            # If False, this body will not be considered during collision checking.
            'isActive': 'Int', # Int
            # If the connected body has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # The unique identifier of this connected body.
            'id': 'String', # String
            # The name of this connected body.
            'name': 'String', # String
        },

        # A named parameter holding a single string value
        'StringParameterInput': {
            'deleted': 'Boolean', # Boolean
            'id': 'String', # String
            'value': 'String', # String
        },

        # The side walls of e.g. a cage or roll cart.
        'SideWallInput': {
            'transform': 'Float', # [Float!]!
            'halfExtents': 'Float', # [Float!]!
            'type': 'String', # String!
        },

        # The parameter of a calibration board. Calibration boards are used to determine the position of a camera relative to the robot.
        'CalibrationBoardParametersInput': {
            'dotsDistanceX': 'Float', # Float
            'dotsDistanceY': 'Float', # Float
            'dotColor': 'Float', # [Float!]
            'patternName': 'String', # String
            'dotDiameterDistanceRatio': 'Float', # Float
            'bigDotDiameterDistanceRatio': 'Float', # Float
            'numDotsX': 'Int', # Int
            'numDotsY': 'Int', # Int
        },

        # triangle mesh
        'MeshInput': {
            'vertices': 'Float', # [Float!]!
            'indices': 'Int', # [Int!]!
        },

        # Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        'GeometryInput': {
            # (Container measurement (3/4)): The cross vector of the bottom surface
            'bottomCross': 'Float', # [Float!]
            # (Cage measurement (4/5)):
            'innerSizeZ': 'Float', # Float
            # (Cage measurement (5/5)):
            'sideWalls': 'SideWallInput', # [SideWallInput!]
            'name': 'String', # String
            # Type of geometry, can be one of: box, container, cage, sphere, cylinder, trimesh
            'type': 'String', # String
            # For calibration boards
            'calibrationBoardParameters': 'CalibrationBoardParametersInput', # CalibrationBoardParametersInput
            'ambientColor': 'Float', # [Float!]
            # Half the extents of a box, in each dimension. For a crate of size 1 m x 1 m x 2 m, this vector would be [0.5, 0.5, 1.0]
            'halfExtents': 'Float', # [Float!]
            # (Cage measurement (2/5)):
            'innerSizeX': 'Float', # Float
            # For cylinders only
            'height': 'Float', # Float
            # (Container measurement (1/4)): The outer extent of the container
            'outerExtents': 'Float', # [Float!]
            # (Container measurement (4/4)): The normal vector of the bottom surface
            'bottom': 'Float', # [Float!]
            'transparency': 'Float', # Float
            # (Container measurement (2/4)): The inner extent of the container.
            'innerExtents': 'Float', # [Float!]
            # For trimeshes
            'mesh': 'MeshInput', # MeshInput
            'id': 'String', # String
            'modifiable': 'Boolean', # Boolean
            # If the geometry has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            'diffuseColor': 'Float', # [Float!]
            # Transform of geometry in link space
            'transform': 'Float', # [Float!]
            # (Cage measurement (3/5)):
            'innerSizeY': 'Float', # Float
            # For spheres and cylinders
            'radius': 'Float', # Float
            # TODO(felixvd): What do these values describe?
            # (Cage measurement (1/5)): The extents of the base of a cage (an object to stack boxes into)
            'baseExtents': 'Float', # [Float!]
            'visible': 'Boolean', # Boolean
        },

        # Link of a body, containing geometries. Links can be connected by joints.
        'LinkInput': {
            # The moments of inertia around each rotation axis
            'inertiaMoments': 'Float', # [Float!]
            # A named parameter holding a single string value
            'stringParameters': 'StringParameterInput', # [StringParameterInput]
            # The unique ID of the link
            'id': 'String', # String
            # The link transform is relative to the body's coordinate system. Same convention as in OpenRAVE. For child links, the transform depends on the joint values and the parent link. A link that has only children and no parents is the body's "base link".
            'transform': 'Float', # [Float!]
            # The frame for inertia and center of mass of the link, in the link's coordinate system.
            'massTransform': 'Float', # [Float!]
            # Whether collision is enabled for this link.
            'isEnabled': 'Boolean', # Boolean
            # If the link has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # A named parameter holding an array of integer values
            'intParameters': 'IntsParameterInput', # [IntsParameterInput]
            # A named parameter holding an array of float values
            'floatParameters': 'FloatsParameterInput', # [FloatsParameterInput]
            # Change visible for all geometries in the link. Not saved in file, only used by API to update multiple geometries visibility at once.
            'visible': 'Boolean', # Boolean
            # Links which will be considered "adjacent". Collisions between adjacent links are ignored.
            'forcedAdjacentLinks': 'String', # [String!]
            # The mass of the link, in kg.
            'mass': 'Float', # Float
            # The non-unique name of the link
            'name': 'String', # String
            # List of geometries in this link. Defined in the link's coordinate system.
            'geometries': 'GeometryInput', # [GeometryInput]
            # Whether the link is static and cannot move depending on dof values.
            'isStatic': 'Boolean', # Boolean
            # Relative transform to parent link. Not saved in file, only used by API to update multiple link transforms through relative transform.
            'relativeTransform': 'Float', # [Float!]
        },

        # Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        'ToolInput': {
            # If the tool has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # The type of Inverse Kinematics (IK) solver to use
            'ikSolverType': 'String', # String
            # The Transform from the Effector Link to the tool coordinate frame.
            'transform': 'Float', # [Float!]
            # Name of the tool.
            'name': 'String', # String
            # The names of the joints in the gripper
            'gripperJointNames': 'String', # [String!]
            'chuckingDirections': 'Float', # [Float!]
            # The link name that the connected bodies are attached to that belongs to this tool changer.
            'toolChangerLinkName': 'String', # String
            # The link at which the IK solver ends
            'ikChainEndLinkName': 'String', # String
            # The name of the gripper
            'grippername': 'String', # String
            # The direction in which the tool should approach an object (e.g. to grasp)
            'direction': 'Float', # [Float!]
            # The unique ID of the tool.
            'id': 'String', # String
            # The link at which the IK chain begins
            'baseLinkName': 'String', # String
            # The link in which the tool is defined
            'effectorLinkName': 'String', # String
            # When this parameter is not empty, only grasp sets listed here are applicable for this manipulator.
            'restrictGraspSetNames': 'String', # [String!]
            # The tool name in each connected body to use when the connected body is activated by the tool changer.
            'toolChangerConnectedBodyToolName': 'String', # String
        },

        # Gripper info describing the gripper properties, used for planning gripper operations.
        'GripperInfoInput': {
            'id': 'String', # String
            'name': 'String', # String
            'grippertype': 'String', # String
            'gripperJointNames': 'String', # [String!]
            'extendable': 'Any', # Any
            # If the GripperInfo has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
        },

        # Equations for mimic joints, whose motion depends on another joint.
        # 
        # See http://warp.povusers.org/FunctionParser/fparser.html for a full description of the equation format.
        'MimicInput': {
            'equations': 'String', # [String!]!
        },

        # Description of a joint's electric actuator.
        'ElectricMotorActuatorInput': {
            'torqueConstant': 'Float', # Float
            'noLoadSpeed': 'Float', # Float
            'nominalSpeedTorquePoints': 'Float', # [[Float!]!]
            'stallTorque': 'Float', # Float
            'nominalTorque': 'Float', # Float
            'startingCurrent': 'Float', # Float
            'nominalVoltage': 'Float', # Float
            'gearRatio': 'Float', # Float
            'assignedPowerRating': 'Float', # Float
            'speedConstant': 'Float', # Float
            'viscousFriction': 'Float', # Float
            'maxInstantaneousTorque': 'Float', # Float
            'rotorInertia': 'Float', # Float
            'terminalResistance': 'Float', # Float
            'maxSpeed': 'Float', # Float
            'maxSpeedTorquePoints': 'Float', # [[Float!]!]
            'modelType': 'String', # String
            'coloumbFriction': 'Float', # Float
        },

        # Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        'JointInput': {
            # The parent link of the joint
            'parentLinkName': 'String', # String
            # A named parameter holding an array of integer values
            'intParameters': 'IntsParameterInput', # [IntsParameterInput]
            'hardMaxVel': 'Float', # [Float!]
            'isActive': 'Boolean', # Boolean
            # A named parameter holding an array of float values
            'floatParameters': 'FloatsParameterInput', # [FloatsParameterInput]
            # Maximum velocity values of determined size
            'maxVel': 'Float', # [Float!]
            # True if a joint axis has an identification at its lower and upper limits. An identification of the lower and upper limits means that once the joint reaches its upper limit, it is also at its lower limit. The most common identification on revolute joints is at -pi and pi. 'circularity' means that the joint does not stop at the limits.
            'isCircular': 'Int', # [Int!]
            'maxInertia': 'Float', # [Float!]
            # Can be "revolute" or "prismatic"
            'type': 'String', # String
            # Maximum acceleration values
            'maxAccel': 'Float', # [Float!]
            # The discretization of the joint used when line-collision checking. The resolutions should be set as large as possible such that the joint will not go through obstacles.
            'resolutions': 'Float', # [Float!]
            # A named parameter holding a single string value
            'stringParameters': 'StringParameterInput', # [StringParameterInput]
            # The upper limits for the joint's position values
            'upperLimit': 'Float', # [Float!]
            # Maximum jerk values (the derivative of the acceleration)
            'maxJerk': 'Float', # [Float!]
            # The non-unique name of the joint
            'name': 'String', # String
            'currentValues': 'Float', # [Float!]
            # The child link of the joint
            'childLinkName': 'String', # String
            # The lower limits for the joint's position values
            'lowerLimit': 'Float', # [Float!]
            # The unique ID of the joint
            'id': 'String', # String
            # Maximum torque values
            'maxTorque': 'Float', # [Float!]
            # The axes of the joint. Axes and anchors are relative to the parent link
            'axes': 'Float', # [[Float!]!]
            'hardMaxJerk': 'Float', # [Float!]
            # The anchors of the joint. Axes and anchors are relative to the parent link.
            'anchors': 'Float', # [Float!]
            # If the joint has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # Equations for mimic joints, which move depending on this joint.
            'mimics': 'MimicInput', # [MimicInput!]
            'hardMaxAccel': 'Float', # [Float!]
            # The weight of each joint for computing distance metrics
            'weights': 'Float', # [Float!]
            # Internal wrap offset parameter for revolute joints. Wrap offsets are needed for rotation joints since the range is limited to 2*pi. The offset allows the joint to function in the range [-pi+offset,pi+offset].
            'offsets': 'Float', # [Float!]
            # Description of a joint's electric actuator.
            'electricMotorActuator': 'ElectricMotorActuatorInput', # ElectricMotorActuatorInput
        },

        # An object that is currently grabbed (grasped) by the robot.
        'GrabbedInput': {
            # If the grabbed object has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # The unique ID of the grabbed object.
            'id': 'String', # String
            # The non-unique name of the grabbed object.
            'grabbedName': 'String', # String
            # The link that the grabbed object is attached to
            'robotLinkName': 'String', # String
            # Transform from the robot link the object is attached to
            'transform': 'Float', # [Float!]
            # Links for which collision with the object should be ignored
            'ignoreRobotLinkNames': 'String', # [String!]
        },

        # An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        'BodyInput': {
            # Change visible for all geometries in the body. Not saved in file, only used by API to update multiple geometries visibility at once.
            'visible': 'Boolean', # Boolean
            # Parameters of an OpenRAVE body.
            'readableInterfaces': 'ReadableInterfacesInput', # ReadableInterfacesInput
            # The (non-unique) name of this body.
            'name': 'String', # String
            # The values of the body's joints.
            'dofValues': 'DOFValueInput', # [DOFValueInput!]
            # Bodies that are connected to this one
            'connectedBodies': 'ConnectedBodyInput', # [ConnectedBodyInput]
            # If the body has been deleted or not. See the "Differential reference system" section in the Webstack Readme for details.
            'deleted': 'Boolean', # Boolean
            # The unique identifier of this body.
            'id': 'String', # String
            # The links that are part of the body. Each link is connected to one joint.
            'links': 'LinkInput', # [LinkInput]
            # Change collision enable state for all links in the body. Not saved in file, only used by API to update multiple link enable states at once.
            'isEnabled': 'Boolean', # Boolean
            # Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
            'tools': 'ToolInput', # [ToolInput]
            # A list of possible grippers
            'gripperInfos': 'GripperInfoInput', # [GripperInfoInput]
            # A list of attached sensors (e.g. cameras, force sensors, light curtains...)
            'attachedSensors': 'AttachedSensorInput', # [AttachedSensorInput]
            'created': 'DateTime', # DateTime
            # The joints that make up the body. One joint connects to one link.
            'joints': 'JointInput', # [JointInput]
            # The "parent" of this body. Fields that are undefined in this body will be taken from the parent (recursively).
            'referenceUri': 'String', # String
            # Grabbed items
            'grabbed': 'GrabbedInput', # [GrabbedInput]
            # The transform from the parent (the world).
            'transform': 'Float', # [Float!]
            # Just a hint (internal). Not to be used by any logic.
            'referenceUriHint': 'String', # String
            # Whether the body is a kinBody or a robot
            'isRobot': 'Boolean', # Boolean
            'modified': 'DateTime', # DateTime
            # interfaceType, e.g. GenericRobot
            'interfaceType': 'String', # String
        },

        # Blob of data, belonging to an environment. Blobs are usually support files and images.
        'BlobInput': {
            # Content type of the blob.
            'contentType': 'String', # String
        },

        # A unit used for a value.
        'UnitInput': {
            # The name of the unit
            'unitName': 'String', # String!
            # The scaling factor to convert this unit to a basic SI unit. For mm, this is 0.001
            'unitScale': 'Float', # Float!
        },

        # An OpenRAVE Environment
        'EnvironmentInput': {
            # List of blobs belonging to this environment.
            'blobs': 'BlobInput', # [BlobInput]
            # Description of the environment.
            'description': 'String', # String
            # Length unit used in the environment.
            'unit': 'UnitInput', # UnitInput
            # Not used at the moment.
            'disabledReferenceEnvironmentIds': 'String', # [String!]
            # Name of the environment. Not guaranteed to be unique.
            'name': 'String', # String
            # Gravity direction and magnitude of the environment, unit in meters per second squared.
            'gravity': 'Float', # [Float!]
            # List of keywords tagged on the environment.
            'keywords': 'String', # [String!]
            # Not used at the moment.
            'referenceEnvironmentIds': 'String', # [String!]
            # The unique ID of the environment.
            'id': 'String', # String
            # For robot files and linking the environment to a file stored on disk.
            'referenceFilename': 'String', # String
            # List of bodies in the environment. Bodies represent robots, manipulators, grippers, physical objects and more
            'bodies': 'BodyInput', # [BodyInput]
        },
    }

#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED, SEE HEADER
#

